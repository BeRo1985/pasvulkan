#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(push_constant, std140, row_major) uniform PushConstants {
  int mipMapLevel;
  int maxMipMapLevel;
  int numSamples;
  int dummy;
} pushConstants;
/* clang-format on */

layout(set = 0, binding = 0) uniform samplerCube uSourceTexture;

layout(set = 0, binding = 1) writeonly uniform imageCube uDestinationTexture;

#include "ibl.glsl"

void main() {
  ivec3 uvw = ivec3(gl_GlobalInvocationID.xyz);
  ivec2 destinationTextureSize = imageSize(uDestinationTexture);
  if (all(greaterThanEqual(uvw, ivec3(0))) && all(lessThan(uvw, ivec3(destinationTextureSize, 6)))) {
    vec3 direction = getCubeMapDirection((vec2(uvw.xy) + vec2(0.5)) / vec2(destinationTextureSize), uvw.z);
    float roughness = clamp(exp2((1.0 - float((pushConstants.maxMipMapLevel - 1) - pushConstants.mipMapLevel)) / 1.2), 0.0, 1.0);
    imageStore(uDestinationTexture, uvw, filterGGX(uSourceTexture, direction, pushConstants.numSamples, roughness));
  }
}
