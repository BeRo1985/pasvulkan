#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

// A bilinear 13-tap 2x downsampler (equals to a 36-tap non-bilinear 2x downsampler)
// Idea is of the http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare slides

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D uSourceTexture; // Source mipmap level rexture

layout(set = 0, binding = 1) writeonly uniform image2D uDestinationTexture; // Destination mipmap level image

/* clang-format on */

ivec2 sourceSize = ivec2(textureSize(uSourceTexture, 0).xy);

vec2 invSourceSize = vec2(1.0) / vec2(sourceSize);

#if MIPMAPLEVEL == 0
vec4 getNearestSource(const in ivec2 uv, const in ivec2 offset) {
  //
  return texelFetch(uSourceTexture, clamp(uv + offset, ivec2(0), ivec2(sourceSize) - ivec2(1)), 0);
}
#endif

#if MIPMAPLEVEL != 0
vec4 getBilinearSource(const in ivec2 uv, const in ivec2 offset) {
#if 0
  // Just for as reference 
  return (getNearestSource(uv, offset + ivec2(0, 0)) +  //
          getNearestSource(uv, offset + ivec2(1, 0)) +  //
          getNearestSource(uv, offset + ivec2(1, 1)) +  //
          getNearestSource(uv, offset + ivec2(0, 1))) *
         0.25;
#else
  return textureLod(uSourceTexture, (vec2(ivec2(clamp(uv + offset, ivec2(0), ivec2(sourceSize) - ivec2(1)))) + vec2(0.5)) * invSourceSize, 0);
#endif
}
#endif

#if MIPMAPLEVEL == 0
vec4 Median(const in vec4 pA, const in vec4 pB, const in vec4 pC) {       //
  return ((pA + pB + pC) - min(min(pA, pB), pC)) - max(max(pA, pB), pC);  //
}
#endif

#if MIPMAPLEVEL == 1
vec4 KarisAverage(const in vec4 pColorA, const in vec4 pColorB, const in vec4 pColorC, const in vec4 pColorD) {
  const vec3 lLuma = vec3(0.299, 0.587, 0.114);
  vec4 lWeights = vec4(1.0) / (vec4(1.0) + vec4(dot(pColorA.rgb, lLuma), dot(pColorB.rgb, lLuma), dot(pColorC.rgb, lLuma), dot(pColorD.rgb, lLuma)));
  return ((pColorA * lWeights.x) +  //
          (pColorB * lWeights.y) +  //
          (pColorC * lWeights.z) +  //
          (pColorD * lWeights.w)) /
         dot(lWeights, vec4(1.0));
}
#endif

void main() {
  ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
  ivec2 destinationTextureSize = imageSize(uDestinationTexture);
  if (all(greaterThanEqual(xy, ivec2(0))) && all(lessThan(xy, destinationTextureSize))) {
    ivec2 sourceXY = xy << ivec2(1);
    vec4 color;
#if MIPMAPLEVEL == 0
    color = vec4(Median(Median(getNearestSource(sourceXY, ivec2(0)),      //
                               getNearestSource(sourceXY, ivec2(-1, 0)),  //
                               getNearestSource(sourceXY, ivec2(1, 0))),  //
                        getNearestSource(sourceXY, ivec2(0, -1)),         //
                        getNearestSource(sourceXY, ivec2(0, 1)))
                     .xyz,  //
                 1.0);
#else
    // 0     1     2
    //    3     4
    // 5     6     7
    //    8     9
    // 10   11    12
    vec4 lTap0 = getBilinearSource(sourceXY, ivec2(-2, -2));
    vec4 lTap1 = getBilinearSource(sourceXY, ivec2(0, -2));
    vec4 lTap2 = getBilinearSource(sourceXY, ivec2(2, -2));
    vec4 lTap3 = getBilinearSource(sourceXY, ivec2(-1, -1));
    vec4 lTap4 = getBilinearSource(sourceXY, ivec2(1, -1));
    vec4 lTap5 = getBilinearSource(sourceXY, ivec2(-2, 0));
    vec4 lTap6 = getBilinearSource(sourceXY, ivec2(0, 0));
    vec4 lTap7 = getBilinearSource(sourceXY, ivec2(2, 0));
    vec4 lTap8 = getBilinearSource(sourceXY, ivec2(-1, 1));
    vec4 lTap9 = getBilinearSource(sourceXY, ivec2(1, 1));
    vec4 lTap10 = getBilinearSource(sourceXY, ivec2(-2, 2));
    vec4 lTap11 = getBilinearSource(sourceXY, ivec2(0, 2));
    vec4 lTap12 = getBilinearSource(sourceXY, ivec2(2, 2));
#if MIPMAPLEVEL == 1
    color = (KarisAverage(lTap3, lTap4, lTap8, lTap9) * 0.5) +      //
            (KarisAverage(lTap0, lTap1, lTap5, lTap6) * 0.125) +    //
            (KarisAverage(lTap1, lTap2, lTap6, lTap7) * 0.125) +    //
            (KarisAverage(lTap5, lTap6, lTap10, lTap11) * 0.125) +  //
            (KarisAverage(lTap6, lTap7, lTap11, lTap12) * 0.125);
#else
    color = ((lTap3 + lTap4 + lTap8 + lTap9) * (0.5 / 4.0)) +      //
            ((lTap0 + lTap1 + lTap5 + lTap6) * (0.125 / 4.0)) +    //
            ((lTap1 + lTap2 + lTap6 + lTap7) * (0.125 / 4.0)) +    //
            ((lTap5 + lTap6 + lTap10 + lTap11) * (0.125 / 4.0)) +  //
            ((lTap6 + lTap7 + lTap11 + lTap12) * (0.125 / 4.0));   //
#endif
#endif
    imageStore(uDestinationTexture, xy, color);
  }
}
