
var applicationData = { initialized: false }; // Application data object, used to store application-specific data with survival across application code reloads  
var application = null; // the application object, used to access the application functions

function loadCode() {
  if (application) {
    // Clear cache for require to reload the application object
    ModuleManager.remove("application");
  }
  application = require("application"); // load the application object from the application module
  if (application) {
    application.data = applicationData; // set the data object to the application object
  }
}

// called when a new application session is created
function onApplicationCreate() {
  print("POCA: onApplicationCreate\n");
  loadCode(); // load the application code
  if (application) {
    application?.create(); // call the create function of the application object
  }
}

// called when a application session is destroyed
function onApplicationDestroy() {

  print("POCA: onApplicationDestroy\n");

  if (application) {
   application?.destroy(); // call the destroy function of the application object
  }

}

// called when the loading of a application session starts
function onApplicationStartLoad() {
  print("POCA: onApplicationStartLoad\n");
  if (application) {
    application?.startLoad(); // call the startLoad function of the application object
  }
}

// called when the loading of a application session goes into the background
function onApplicationBackgroundLoad() {
  print("POCA: onApplicationBackgroundLoad\n");
  if (application) {
    application?.backgroundLoad(); // call the backgroundLoad function of the application object
  }
}

// called when the loading of a application session finishes
function onApplicationFinishLoad() {
  print("POCA: onApplicationFinishLoad\n");
  if (application) {
    application?.finishLoad(); // call the finishLoad function of the application object
  }
}

// called every frame before the application is updated and rendered in parallel, use this to update the atomic parts of the application, 
// like adding or removing entities. Otherwise it may lead to undefined behavior, even crashes. 
function onApplicationCheck(deltaTime) {
  //print("POCA: onApplicationCheck\n");
  if (application) {
    application?.check(deltaTime); // call the check function of the application object
  }
}

// called every frame after the application gets updated 
function onApplicationUpdate(deltaTime) {
  //print("POCA: onApplicationUpdate\n");
  if (application) {
    application?.update(deltaTime); // call the update function of the application object
  }
}

// called every frame when the application update function enters the "Fix your timestep" loop
function onApplicationBeginUpdate(deltaTime) {
  //print("POCA: onApplicationBeginUpdate\n");
  if (application) {
    application?.beginUpdate(deltaTime); // call the beginUpdate function of the application object
  }
}

// called every frame when the application update function leaves the "Fix your timestep" loop
function onApplicationEndUpdate(deltaTime) {
  //print("POCA: onApplicationEndUpdate\n");
  if (application) {
    application?.endUpdate(deltaTime); // call the endUpdate function of the application object
  }
}

// called every "Fix your timestep" iteration when the application update function must store the current state of the application for interpolation for the "Fix your timestep" approach
function onApplicationUpdateStore() {
  //print("POCA: onApplicationUpdateStore\n");
  if (application) {
    application?.updateStore(); // call the updateStore function of the application object
  }
}

// called every frame when the application update function must interpolate the application state for the "Fix your timestep" approach
function onApplicationUpdateInterpolation(alpha) {
  //print("POCA: onApplicationUpdateInterpolation\n");
  if (application) {
    application?.updateInterpolation(alpha); // call the updateInterpolation function of the application object
  }
}

// called every "Fix your timestep" iteration when the application update function must update the application state
function onApplicationUpdateStep(deltaTime) {
  //print("POCA: onApplicationUpdateStep\n");
  if (application) {
    application?.updateStep(deltaTime); // call the updateInterpolation function of the application object
  }
}

// called on every input event, like key press, mouse click, etc.
function onApplicationInputEvent(event) {
  if (application) {
    if(application?.onInputEvent(event)) {
      return true; // if the application object handled the event, return true
    }
  }
  if (event.EventType === Input.EventTypes.EVENT_KEY) {
    if (event.KeyEventType === Input.KeyEventTypes.KEYEVENT_DOWN) {
      if (event.KeyCode === Input.KeyCodes.KEYCODE_F5) {        
        print("POCA: Reloading application code due to F5 key press\n");
        loadCode(); // reload the application code
        return false; // do not consume the event, so the engine can handle it as well               
      }
    }
  }
  return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Canvas
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var canvas = null;

var canvas_font = null;

// called when a new canvas is created
function onApplicationCreateCanvas(nativeCanvas) {
  canvas = nativeCanvas;
  if (application) {
    application?.createCanvas(nativeCanvas); // call the createCanvas function of the application object
  }
}

// called when a canvas is destroyed
function onApplicationDestroyCanvas(nativeCanvas) {
  canvas = null;
  if (application) {
    application?.destroyCanvas(nativeCanvas); // call the destroyCanvas function of the application object
  }
}

// called at update time to update the canvas
function onApplicationUpdateCanvas(deltaTime) {
  if (application) {
    application?.updateCanvas(deltaTime); // call the updateCanvas function of the application object
  }
}

// called when the canvas is about to be drawn
function onApplicationDrawCanvas(nativeCanvas, width, height, nativeWidth, nativeHeight) {
  if (canvas && application) {
    application?.drawCanvas(nativeCanvas, width, height, nativeWidth, nativeHeight); // call the drawCanvas function of the application object
  }
}

