
var application = {

  data: null,

  create: function() {
    print("POCA: Application create\n");
    // Initialize application data
    if (this.data && !this.data.initialized) {
      this.data.initialized = true;
      this.data.counter = 0;
    }
  },

  destroy: function() {
    print("POCA: Application destroy\n");
    // Cleanup application data if needed
  },

  show: function() {
    print("POCA: Application show\n");
    // Handle application becoming visible
  },

  hide: function() {
    print("POCA: Application hide\n");
    // Handle application becoming hidden
  },

  resume: function() {
    print("POCA: Application resume\n");
    // Handle application resuming
  },

  pause: function() {
    print("POCA: Application pause\n");
    // Handle application pausing
  },

  resize: function(width, height) {
    print("POCA: Application resize to ", width, "x", height, "\n");
    // Handle application resizing
  },

  afterCreateSwapChain: function() {
    print("POCA: Application afterCreateSwapChain\n");
    // Handle actions after swap chain creation
  },

  beforeDestroySwapChain: function() {
    print("POCA: Application beforeDestroySwapChain\n");
    // Handle actions before swap chain destruction
  },

  check: function(deltaTime) {
    // Perform checks before update
  },

  update: function(deltaTime) {
    // Update application logic
    this.data.counter += deltaTime;
    //print("POCA: Application update, counter = " + this.data.counter + "\n");
  },

  onInputEvent: function(event) {
    // Handle input events
    //print("POCA: Application onInputEvent\n");
    return false; // return true if the event was handled
  },

  createCanvas: function(nativeCanvas) {
    print("POCA: Application createCanvas\n");
    // Setup the native canvas if needed
  },

  destroyCanvas: function(nativeCanvas) {
    print("POCA: Application destroyCanvas\n");
    // Cleanup the native canvas if needed
  },  

  updateCanvas: function(deltaTime) {
    // Update the native canvas if needed
  },

  drawCanvas: function(nativeCanvas, width, height, nativeWidth, nativeHeight) {
    // Draw on the native canvas if needed
  }

};

return application;