#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(push_constant, std140, row_major) uniform PushConstants {
  int mipMapLevel;
  int maxMipMapLevel;
  int numSamples;
  int which;
} pushConstants;
/* clang-format on */

layout(set = 0, binding = 0) uniform samplerCube uSourceTexture;

layout(set = 0, binding = 1) writeonly uniform imageCube uDestinationTexture;

#define COMPUTESHADER
#include "roughness.glsl"
#include "ibl.glsl"

void main() {
  ivec3 uvw = ivec3(gl_GlobalInvocationID.xyz);
  int which = pushConstants.which;
  float roughness = mipMapLevelToRoughness(float(pushConstants.mipMapLevel), float(pushConstants.maxMipMapLevel));
  if(gl_LocalInvocationIndex == 0){
    switch(which){
      case 0:{
        for(int sampleIndex = 0, sampleCount = pushConstants.numSamples; sampleIndex < sampleCount; sampleIndex++){
          vec4 importanceSample = GGX(Hammersley(sampleIndex, sampleCount), roughness);
          ImportanceSamples[sampleIndex] = vec4(normalize(vec3(vec2(cos(importanceSample.z), sin(importanceSample.z)) * importanceSample.y, importanceSample.x)), importanceSample.w);
        }
        break;
      }
      case 1:{
        roughness = clamp(roughness, 1e-3, 1.0);
        for(int sampleIndex = 0, sampleCount = pushConstants.numSamples; sampleIndex < sampleCount; sampleIndex++){
          vec4 importanceSample = Charlie(Hammersley(sampleIndex, sampleCount), roughness);
          ImportanceSamples[sampleIndex] = vec4(normalize(vec3(vec2(cos(importanceSample.z), sin(importanceSample.z)) * importanceSample.y, importanceSample.x)), importanceSample.w);
        }
        break;
      }
      case 2:{
        for(int sampleIndex = 0, sampleCount = pushConstants.numSamples; sampleIndex < sampleCount; sampleIndex++){
          vec4 importanceSample = Lambertian(Hammersley(sampleIndex, sampleCount), roughness);
          ImportanceSamples[sampleIndex] = vec4(normalize(vec3(vec2(cos(importanceSample.z), sin(importanceSample.z)) * importanceSample.y, importanceSample.x)), importanceSample.w);
        }
        break;
      }
    }
  }  
  groupMemoryBarrier();
  barrier();
  if((which >= 0) && (which < 3)){
    ivec2 destinationTextureSize = imageSize(uDestinationTexture).xy;
    if (all(greaterThanEqual(uvw, ivec3(0))) && all(lessThan(uvw, ivec3(destinationTextureSize, 6)))) {
      vec3 direction = getCubeMapDirection((vec2(uvw.xy) + vec2(0.5)) / vec2(destinationTextureSize), uvw.z);
      vec4 result = vec4(0.0);
      switch(which){
        case 0:{
          result = filterGGX(uSourceTexture, direction, pushConstants.numSamples, roughness);
          break;
        }
        case 1:{
          result = filterCharlie(uSourceTexture, direction, pushConstants.numSamples, clamp(roughness, 1e-3, 1.0));
          break;
        }
        case 2:{
          result = filterLambertian(uSourceTexture, direction, pushConstants.numSamples, roughness);
          break;
        }
      }
      imageStore(uDestinationTexture, uvw, result);
    }
  }
}
