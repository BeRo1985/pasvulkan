#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) buffer FibonacciSpherePoints {
  vec4 vectors[]; // actually vec3, but we need to align to vec4
} fibonacciSpherePoints;

struct FibonacciSphereVertex {
  vec4 positionBitangentSign; // xyz = position, w = sign of bitangent
  vec4 normalTangent; // xy = normal, zw = tangent, both octahedral 
};

layout(set = 0, binding = 1, std430) buffer FibonacciSphereVertices {
  FibonacciSphereVertex vertices[];
} fibonacciSphereVertices;

layout(set = 0, binding = 2) uniform sampler2D uTextureHeightMap; // r32f
layout(set = 0, binding = 3) uniform sampler2D uTextureNormalMap; // rgba16_snorm

layout(push_constant) uniform PushConstants {
  mat4 modelMatrix;
  uint countPoints;
  float planetGroundRadius; // planet ground radius
  float heightMapScale; // scale of height map
  uint dummy;
} pushConstants;

/* clang-format on */

#include "octahedral.glsl"
#include "octahedralmap.glsl"

void main(){
  
  uint index = uint(gl_GlobalInvocationID.x);
  
  if(index < pushConstants.countPoints){

    vec3 vector = normalize(fibonacciSpherePoints.vectors[index].xyz);

    float height = textureCatmullRomOctahedralMap(uTextureHeightMap, vector).x;
    
    vec3 normal = textureCatmullRomOctahedralMap(uTextureNormalMap, vector).xyz;
    vec3 tangent = normalize(cross((abs(normal.y) < 0.999999) ? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, 1.0), normal));
    vec3 bitangent = normalize(cross(normal, tangent));

    fibonacciSphereVertices.vertices[index] = FibonacciSphereVertex( 
      vec4(
        (pushConstants.modelMatrix * vec4(vector * fma(height, pushConstants.heightMapScale, pushConstants.planetGroundRadius), 1.0)).xyz, // (heightMapValue * heightMapScale) + planetGroundRadius
        (dot(bitangent, cross(normal, tangent)) < 0.0) ? -1.0 : 1.0
      ), 
      vec4(
        octEncode(normal),
        octEncode(tangent)
      )
    ); 

  }

}
