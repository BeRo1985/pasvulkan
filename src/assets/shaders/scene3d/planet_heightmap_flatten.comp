#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, r32f) uniform image2D uImageHeightMap;

layout(set = 0, binding = 1) buffer TileMapDirtyBuffer {
  uint data[]; // bitwise dirty map
} tileMapDirtyBuffer;

layout(set = 0, binding = 2) uniform sampler2DArray uBrushTextureArray;

layout(push_constant) uniform PushConstants {
  vec4 positionRadius;
  uvec4 tileMapResolutionShiftBrushIndex; // x = dirty size, y = shift, z = brush index
  float innerRadius;
  float outerRadius;
  float minHeight;
  float maxHeight;    
  float bottomRadius;
  float topRadius;
  float targetHeight;
  float brushRotation;
} pushConstants;

/* clang-format on */

#include "octahedral.glsl"
#include "octahedralmap.glsl"

void main(){
  
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

  ivec2 texSize = imageSize(uImageHeightMap);

  if(all(greaterThanEqual(texel, ivec2(0))) && all(lessThan(texel, texSize))){
  
    ivec2 xy = wrapOctahedralTexelCoordinates(texel, texSize);
    
    vec3 p = octPlanetUnsignedDecode(vec2(xy) / vec2(texSize));

    vec3 n = normalize(pushConstants.positionRadius.xyz);

    float d;

    if(pushConstants.tileMapResolutionShiftBrushIndex.z == 0u){

      // Just a circle brush
     
      d = smoothstep(pushConstants.outerRadius, pushConstants.innerRadius, length(p - n));

    }else if(pushConstants.tileMapResolutionShiftBrushIndex.z <= 255u){

      // Brush texture
     
      vec3 t = n.yzx - n.zxy, 
           b = normalize(cross(n, t = normalize(t - dot(t, n)))),
           o = p - pushConstants.positionRadius.xyz;
      if(pushConstants.brushRotation != 0.0){
        const vec2 rotationSinCos = sin(vec2(pushConstants.brushRotation) + vec2(0.0, 1.57079632679));
        const vec3 ot = t, ob = b;
        t = (ot * rotationSinCos.y) - (ob * rotationSinCos.x);
        b = (ot * rotationSinCos.x) + (ob * rotationSinCos.y);
      }
      vec2 uv = vec2(dot(o, t), dot(o, b)) / pushConstants.positionRadius.w;
      d = smoothstep(1.0, 1.0 - (1.0 / length(textureSize(uBrushTextureArray, 0).xy)), max(abs(uv.x), abs(uv.y)));

      d *= smoothstep(-1e-4, 1e-4, dot(p, n)); // When we are on the back side of the planet, we need to clear the brush, but smoothly.

      if(d > 0.0){
        d *= textureLod(uBrushTextureArray, vec3(fma(uv, vec2(0.5), vec2(0.5)), float(pushConstants.tileMapResolutionShiftBrushIndex.z)), 0.0).x;
      }

    }else{

      // No brush
     
      d = 0.0;

    }

    if(d > 0.0){

      {
        uvec2 tileMapXY = uvec2(texel) >> pushConstants.tileMapResolutionShiftBrushIndex.y;
        uint tileMapIndex = (tileMapXY.y * pushConstants.tileMapResolutionShiftBrushIndex.x) + tileMapXY.x;
        atomicOr(tileMapDirtyBuffer.data[tileMapIndex >> 5u], 1u << (tileMapIndex & 31u));
      } 
  
      imageStore(
        uImageHeightMap, 
        texel, 
        vec4(
          clamp(
            mix(
              imageLoad(uImageHeightMap, texel).x, 
              (pushConstants.targetHeight - (dot(p, n) * pushConstants.bottomRadius)) / (pushConstants.topRadius - pushConstants.bottomRadius), 
              d
            ), 
            pushConstants.minHeight, 
            pushConstants.maxHeight
          )
        )
      );

    }

  }

}

