#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct TriangleVertex {
  vec4 position;
  vec4 normal;
  // No tangent, bitangent, texcoord and the like, since it's not need for physics
};

layout(set = 0, binding = 0, std430) buffer TriangleVertices{
  TriangleVertex vertices[]; // 32 bytes per vertex
} triangleVertices;

layout(set = 0, binding = 1) uniform sampler2D uTextureHeightMap; // r32f

layout(set = 0, binding = 2) uniform sampler2D uTextureNormalMap; // rgba16_snorm

layout(push_constant) uniform PushConstants {
  mat4 modelMatrix;
  uint tileMapResolution;
  uint tileResolution;
  float bottomRadius;
  float topRadius;
} pushConstants;

#include "octahedralmap.glsl"
#include "octahedral.glsl"

void main(){

  const uint index = uint(gl_GlobalInvocationID.x);

  const uint tileMapSize = pushConstants.tileMapResolution * pushConstants.tileMapResolution;
  
  const uint tileVertexResolution = pushConstants.tileResolution + 1u;

  const uint tileVertexSize = tileVertexResolution * tileVertexResolution;

  const uint tileMapTotalSize = tileVertexSize * tileMapSize;

  if(index < tileMapTotalSize){

    uint tileMapIndex = index / tileVertexSize;
    
    uint tileVertexIndex = index - (tileMapIndex * tileVertexSize);

    uvec2 tileMapXY;
    tileMapXY.y = tileMapIndex / pushConstants.tileMapResolution;
    tileMapXY.x = tileMapIndex - (tileMapXY.y * pushConstants.tileMapResolution);

    uvec2 tileVertexXY;
    tileVertexXY.y = tileVertexIndex / tileVertexResolution;
    tileVertexXY.x = tileVertexIndex - (tileVertexXY.y * tileVertexResolution);

    uvec2 quadXY = (tileMapXY * pushConstants.tileResolution) + tileVertexXY;
    
    uint totalResolution = pushConstants.tileMapResolution * pushConstants.tileResolution;
    
    vec2 uv = fma((vec2(quadXY) / vec2(totalResolution)) + vec2(0.5), vec2(2.0), vec2(-1.0));

    vec3 vector = vec3(uv.xy, 1.0 - (abs(uv.x) + abs(uv.y)));
    vector = normalize((vector.z < 0.0) ? vec3((1.0 - abs(vector.yx)) * vec2((vector.x < 0.0) ? -1.0 : 1.0, (vector.y < 0.0) ? -1.0 : 1.0), vector.z) : vector);

    uint texSize = textureSize(uTextureHeightMap, 0).x;
    int lod = (texSize > totalResolution) ? int(log2(float(texSize) / float(totalResolution))) : 0;

    float height = textureCatmullRomOctahedralMap(uTextureHeightMap, vector, lod).x;
    
    vec3 normal = textureCatmullRomOctahedralMap(uTextureNormalMap, vector, lod).xyz;

    triangleVertices.vertices[index] = TriangleVertex( 
      vec4((pushConstants.modelMatrix * vec4(vector * mix(pushConstants.bottomRadius, pushConstants.topRadius, height), 1.0)).xyz, 0.0), 
      vec4(normal, 0.0)
    );    

  }

}