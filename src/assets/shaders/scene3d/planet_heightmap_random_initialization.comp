#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, r32f) writeonly uniform image2D uImageHeightMap;

layout(set = 0, binding = 1) buffer TileMapDirtyBuffer {
  uint data[]; // bitwise dirty map
} tileMapDirtyBuffer;

layout(push_constant) uniform PushConstants {
  int octaves;
  float scale;
  float amplitude;
  float lacunarity;
  float gain;
  float factor;
  float minHeight;
  float maxHeight;
  float bottomRadius;
  float topRadius;
  uint tileMapResolution;
  uint tileMapShift; 
} pushConstants;

/* clang-format on */

#include "octahedral.glsl"
#include "octahedralmap.glsl"

float hash(const vec2 p, const float scale){
  vec3 p3 = fract(p.xyx * 0.1031);
  p3 += p3.yzx + vec3(33.33);
  return fract((p3.x + p3.y) * p3.z);
}

float noise(const vec2 p, const float scale){
  vec2 i = floor(p);
  vec2 f = p - i;
  vec2 u = (f * f) * fma(f, vec2(-2.0), vec2(3.0));
  return mix(mix(hash(i + vec2(0.0, 0.0), scale), hash(i + vec2(1.0, 0.0), scale), u.x),
             mix(hash(i + vec2(0.0, 1.0), scale), hash(i + vec2(1.0, 1.0), scale), u.x), u.y);
}

float fbm(const vec2 p, const int octaves, const float scale, const float amplitude, const float lacunarity, const float gain){
  float result = 0.0;
  float s = scale;
  float a = amplitude;
  for(int i = 0; i < octaves; i++){
    result += noise(p * s, scale) * a;
    s *= lacunarity;
    a *= gain;
  }
  return result;
}

float hash3(const vec3 p, const float scale){
  vec3 p3 = fract(p * scale * 0.1031);
  p3 += p3.zyx + vec3(31.32);
  return fract((p3.x + p3.y) * p3.z);
}

float noise3(const vec3 p, const float scale){
  vec3 i = floor(p);
  vec3 f = p - i;
  vec3 u = (f * f) * fma(f, vec3(-2.0), vec3(3.0));
  return mix(mix(mix(hash3(i + vec3(0.0, 0.0, 0.0), scale), hash3(i + vec3(1.0, 0.0, 0.0), scale), u.x),
                 mix(hash3(i + vec3(0.0, 1.0, 0.0), scale), hash3(i + vec3(1.0, 1.0, 0.0), scale), u.x), u.y),
             mix(mix(hash3(i + vec3(0.0, 0.0, 1.0), scale), hash3(i + vec3(1.0, 0.0, 1.0), scale), u.x),
                 mix(hash3(i + vec3(0.0, 1.0, 1.0), scale), hash3(i + vec3(1.0, 1.0, 1.0), scale), u.x), u.y), u.z);
}

float fbm3(const vec3 p, const int octaves, const float scale, const float amplitude, const float lacunarity, const float gain){
  float result = 0.0;
  float s = scale;
  float a = amplitude;
  for(int i = 0; i < octaves; i++){
    result += noise3(p * s, scale) * a;
    s *= lacunarity;
    a *= gain;
  }
  return result;
}

void main(){
  
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

  ivec2 texSize = imageSize(uImageHeightMap);

  if(all(greaterThanEqual(texel, ivec2(0))) && all(lessThan(texel, texSize))){

    ivec2 xy = wrapOctahedralTexelCoordinates(texel, texSize);
    
    vec3 p = octPlanetUnsignedDecode(vec2(xy) / vec2(texSize));

    {
      uvec2 tileMapXY = uvec2(texel) >> pushConstants.tileMapShift;
      uint tileMapIndex = (tileMapXY.y * pushConstants.tileMapResolution) + tileMapXY.x;
      atomicOr(tileMapDirtyBuffer.data[tileMapIndex >> 5u], 1u << (tileMapIndex & 31u));     
    }
   
    float height = fbm3(
      fma(p, vec3(0.5), vec3(0.5)), 
      pushConstants.octaves,
      pushConstants.scale,
      pushConstants.amplitude,  
      pushConstants.lacunarity,
      pushConstants.gain
    );
   
    imageStore(uImageHeightMap, texel, vec4(clamp(height * pushConstants.factor, pushConstants.minHeight, pushConstants.maxHeight)));

  }

}

