#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_multiview : enable
#extension GL_EXT_samplerless_texture_functions : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

/* clang-format on */

#define MULTISCATAPPROX_ENABLED
#undef SHADOWS_ENABLED

#include "atmosphere_common.glsl"

// Push constants
layout(push_constant, std140) uniform PushConstants {
  vec4 cameraPosition;
  vec4 upVector; 
} pushConstants;

layout(set = 0, binding = 0, rgba32f) uniform imageCube uDestinationTexture;

layout(set = 0, binding = 1) uniform sampler2D uTransmittanceLutTexture;

layout(set = 0, binding = 2) uniform sampler2DArray uMultiScatTexture;

layout(set = 0, binding = 3, std430) buffer AtmosphereParametersBuffer {
  AtmosphereParameters atmosphereParameters;
} uAtmosphereParameters;

AtmosphereParameters atmosphereParameters;
 
ivec2 destinationTextureSize = imageSize(uDestinationTexture);

#include "cubemap.glsl"

#ifdef USE_RGB9E5
#include "rgb9e5.glsl"
#endif

#include "textureutils.glsl"

void main() {

  atmosphereParameters = uAtmosphereParameters.atmosphereParameters;

  ivec3 uvw = ivec3(gl_GlobalInvocationID.xyz);
  if (all(greaterThanEqual(uvw, ivec3(0))) && all(lessThan(uvw, ivec3(destinationTextureSize, 6)))) {

    vec3 direction = getCubeMapDirection((vec2(uvw.xy) + vec2(0.5)) / vec2(destinationTextureSize), uvw.z);

    vec3 cameraPosition = pushConstants.cameraPosition.xyz;

    vec3 upVector = pushConstants.upVector.xyz;

    vec3 worldPos = (atmosphereParameters.inverseTransform * vec4(cameraPosition, 1.0)).xyz;

    vec3 worldDir = direction; 

    float viewHeight = length(worldPos);

    worldPos = normalize(worldPos) * clamp(viewHeight, atmosphereParameters.BottomRadius + PLANET_RADIUS_OFFSET + 0.001, atmosphereParameters.TopRadius - (0.001 + PLANET_RADIUS_OFFSET));

    viewHeight = length(worldPos) - atmosphereParameters.BottomRadius;

    vec3 sunDirection = normalize(getSunDirection(uAtmosphereParameters.atmosphereParameters));

    // The more accurate and more bruteforce ray marching approach  

    vec3 inscattering;
    vec3 transmittance; 

    // Move to top atmosphere as the starting point for ray marching.
    // This is critical to be after the above to not disrupt above atmosphere tests and voxel selection.
    if(!MoveToTopAtmosphere(worldPos, worldDir, atmosphereParameters.TopRadius)){
      
      // Ray is not intersecting the atmosphere       
      inscattering = GetSunLuminance(cameraPosition, worldDir, sunDirection, atmosphereParameters.BottomRadius).xyz;
      transmittance = vec3(1.0);

    }else {

      const bool ground = false;
      const float sampleCountIni = 0.0;
      const bool variableSampleCount = true;
      const bool mieRayPhase = true;
      const float depthBufferValue = -1.0;
      SingleScatteringResult ss = IntegrateScatteredLuminance(
        uTransmittanceLutTexture,
        uMultiScatTexture,
        0,
        vec2(0.0), 
        worldPos, 
        worldDir, 
        sunDirection, 
        atmosphereParameters, 
        ground, 
        sampleCountIni, 
        depthBufferValue, 
        variableSampleCount,  
        mieRayPhase,
        mat4(0.0),
        -1.0,
        false
      );

      inscattering = ss.L;

      inscattering += GetSunLuminance(cameraPosition, worldDir, sunDirection, atmosphereParameters.BottomRadius).xyz * ss.Transmittance;

      transmittance = ss.Transmittance;

    }

    vec4 outputColor = vec4(inscattering, 1.0 - clamp(dot(transmittance, vec3(1.0 / 3.0)), 0.0, 1.0));

#ifdef USE_RGB9E5
    imageStore(uDestinationTexture, uvw, uvec4(encodeRGB9E5(outputColor.xyz)));
#else    
    imageStore(uDestinationTexture, uvw, clamp(outputColor, vec4(-65504.0), vec4(65504.0))); // Clamp to the range of 16-bit floating point numbers.
#endif

  }
 
}