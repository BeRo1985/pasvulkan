#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_samplerless_texture_functions : enable

/* clang-format off */

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

#define TriangleVertex uvec4 // 16 bytes per vertex

layout(set = 0, binding = 0, std430) buffer TriangleVertices {
  TriangleVertex vertices[]; // 16 bytes per vertex
} triangleVertices;

layout(set = 0, binding = 1, std430) buffer QueuedTiles {
  uint data[]; // 6-based, because two VkDispatchIndirectCommand structs are stored in the same buffer at the beginning, with three 32-bit unsigned integers each
} queuedTiles;

layout(set = 0, binding = 2) uniform texture2D uTextureHeightMap; // r32f

layout(set = 0, binding = 3) uniform texture2D uTextureNormalMap; // rgba16_snorm

layout(push_constant) uniform PushConstants {
  //mat4 modelMatrix;
  float bottomRadius;
  float topRadius;
  uint tileMapResolution;
  uint tileResolution;
  int lod;
} pushConstants;

#include "octahedral.glsl"

vec3 safeNormalize(vec3 v){
  return (length(v) > 0.0) ? normalize(v) : vec3(0.0);
}

#if 0
uvec4 encodeVertex(vec3 position, vec3 normal){
#if 0
  // -32768 to 32767, where each positive and negative value has different amount of representable values
  vec2 octNormal = octSignedEncode(normal);  
  ivec4 octNormalIntFloorCeil = ivec4(
     clamp(int(floor(octNormal.x * 32767.5)), -32768, 32767), clamp(int(floor(octNormal.y * 32767.5)), -32768, 32767),
     clamp(int(ceil(octNormal.x * 32767.5)), -32768, 32767), clamp(int(ceil(octNormal.y * 32767.5)), -32768, 32767)
  );
  ivec2 octNormalInts[4] = ivec2[4](octNormalIntFloorCeil.xy, octNormalIntFloorCeil.zy, octNormalIntFloorCeil.xw, octNormalIntFloorCeil.zw);
  int bestIndex = 0;
  vec2 octNormalFloat = vec2(
    (octNormalInts[0].x < 0) ? (float(octNormalsInts.x[0]) / 32768.0) : (float(octNormalsInts.x[0]) / 32767.0), 
    (octNormalInts[0].y < 0) ? (float(octNormalsInts.x[0]) / 32768.0) : (float(octNormalsInts.x[0]) / 32767.0)
  );
  float bestDot = dot(octNormal, octSignedDecode(octNormalFloat));
  for(int i = 1; i < 4; i++){
    octNormalFloat = vec2(
      (octNormalInts[i].x < 0) ? (float(octNormalsInts.x[i]) / 32768.0) : (float(octNormalsInts.x[i]) / 32767.0), 
      (octNormalInts[i].y < 0) ? (float(octNormalsInts.x[i]) / 32768.0) : (float(octNormalsInts.x[i]) / 32767.0)
    );
    float dotProduct = dot(octNormal, octSignedDecode(octNormalFloat));
    if(dotProduct > bestDot){
      bestDot = dotProduct;
      bestIndex = i;
    }
  }
  return uvec4(floatBitsToUint(position), (uint(octNormalInts[bestIndex].x) & 0xffffu) | ((uint(octNormalInts[bestIndex].y) & 0xffffu) << 16));
#else
  // -32767 to 32767, where -32768 is clamped to -32767, for to have a equal-sized range for positive and negative values, and so that 
  // a zero normal is easily possible.
  return uvec4(floatBitsToUint(position), packSnorm2x16(octSignedEncode(normal)));
#endif
}
#endif

void main(){

  const uint queuedTileIndex = uint(gl_GlobalInvocationID.y);
  
  const uint tileMapSize = pushConstants.tileMapResolution * pushConstants.tileMapResolution;

  if((queuedTileIndex < tileMapSize) && (queuedTileIndex < queuedTiles.data[1u])){

    const uint tileMapIndex = queuedTiles.data[queuedTileIndex + 6u];

    if(tileMapIndex < tileMapSize){

      uvec2 tileMapXY;
      tileMapXY.y = tileMapIndex / pushConstants.tileMapResolution;
      tileMapXY.x = tileMapIndex - (tileMapXY.y * pushConstants.tileMapResolution);

      const uint tileVertexSize = pushConstants.tileResolution * pushConstants.tileResolution;

      const uint tileVertexIndex = uint(gl_GlobalInvocationID.x);
      
      if(tileVertexIndex < tileVertexSize){

        uvec2 tileVertexXY;
        tileVertexXY.y = tileVertexIndex / pushConstants.tileResolution;
        tileVertexXY.x = tileVertexIndex - (tileVertexXY.y * pushConstants.tileResolution);

        uvec2 quadXY = (tileMapXY * pushConstants.tileResolution) + tileVertexXY;
        
        uint totalResolution = pushConstants.tileMapResolution * pushConstants.tileResolution;

#if 1
        // Variant that uses temporary neighbor vertices to calculate the smoothed vertex normal

        // Calculate the normal as the average of the normals of some temporary virtual triangles

        // a(-1, -1) b( 0, -1) c( 1, -1)
        // d(-1,  0) e( 0,  0) f( 1,  0)
        // g(-1,  1) h( 0,  1) i( 1,  1)

        ivec2 axy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2(-1, -1), ivec2(totalResolution));
        ivec2 bxy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2( 0, -1), ivec2(totalResolution));
        ivec2 cxy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2( 1, -1), ivec2(totalResolution));
        ivec2 dxy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2(-1,  0), ivec2(totalResolution));
        ivec2 exy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2( 0,  0), ivec2(totalResolution));
        ivec2 fxy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2( 1,  0), ivec2(totalResolution));
        ivec2 gxy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2(-1,  1), ivec2(totalResolution));
        ivec2 hxy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2( 0,  1), ivec2(totalResolution));
        ivec2 ixy = wrapOctahedralTexelCoordinates(ivec2(quadXY) + ivec2( 1,  1), ivec2(totalResolution));

        float ah = texelFetch(uTextureHeightMap, axy << ivec2(pushConstants.lod), 0).x;
        float bh = texelFetch(uTextureHeightMap, bxy << ivec2(pushConstants.lod), 0).x;
        float ch = texelFetch(uTextureHeightMap, cxy << ivec2(pushConstants.lod), 0).x;
        float dh = texelFetch(uTextureHeightMap, dxy << ivec2(pushConstants.lod), 0).x;
        float eh = texelFetch(uTextureHeightMap, exy << ivec2(pushConstants.lod), 0).x;
        float fh = texelFetch(uTextureHeightMap, fxy << ivec2(pushConstants.lod), 0).x;
        float gh = texelFetch(uTextureHeightMap, gxy << ivec2(pushConstants.lod), 0).x;
        float hh = texelFetch(uTextureHeightMap, hxy << ivec2(pushConstants.lod), 0).x;
        float ih = texelFetch(uTextureHeightMap, ixy << ivec2(pushConstants.lod), 0).x;
        
        vec4 av = vec4(octPlanetUnsignedDecode(vec2(axy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, ah), ah);
        vec4 bv = vec4(octPlanetUnsignedDecode(vec2(bxy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, bh), bh);
        vec4 cv = vec4(octPlanetUnsignedDecode(vec2(cxy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, ch), ch);
        vec4 dv = vec4(octPlanetUnsignedDecode(vec2(dxy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, dh), dh);
        vec4 ev = vec4(octPlanetUnsignedDecode(vec2(exy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, eh), eh);
        vec4 fv = vec4(octPlanetUnsignedDecode(vec2(fxy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, fh), fh);
        vec4 gv = vec4(octPlanetUnsignedDecode(vec2(gxy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, gh), gh);
        vec4 hv = vec4(octPlanetUnsignedDecode(vec2(hxy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, hh), hh);
        vec4 iv = vec4(octPlanetUnsignedDecode(vec2(ixy) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, ih), ih);
        
        // Calculate the smoothed normal at point e as the average of the normals of the surrounding triangles in triangle fan order:
        vec3 normal = safeNormalize(
          safeNormalize(cross(av.xyz - ev.xyz, bv.xyz - ev.xyz)) + // Triangle EAB
          safeNormalize(cross(bv.xyz - ev.xyz, cv.xyz - ev.xyz)) + // Triangle EBC          
          safeNormalize(cross(cv.xyz - ev.xyz, fv.xyz - ev.xyz)) + // Triangle EDA
          safeNormalize(cross(fv.xyz - ev.xyz, iv.xyz - ev.xyz)) + // Triangle EFI
          safeNormalize(cross(iv.xyz - ev.xyz, hv.xyz - ev.xyz)) + // Triangle EIH
          safeNormalize(cross(hv.xyz - ev.xyz, gv.xyz - ev.xyz)) + // Triangle EHG
          safeNormalize(cross(gv.xyz - ev.xyz, dv.xyz - ev.xyz)) + // Triangle EGD
          safeNormalize(cross(dv.xyz - ev.xyz, av.xyz - ev.xyz))   // Triangle EDA
        );          

        triangleVertices.vertices[(tileMapIndex * tileVertexSize) + tileVertexIndex] = uvec4(floatBitsToUint(ev.xyz), packSnorm2x16(octSignedEncode(normal))); 

#else

        // Variant that uses the height map to get the smoothed vertex normal directly, but it need another compute shader pass to 
        // calculate the height map with the same calculation efford as above. So it's not really faster, but rather it can be even 
        // slower, because the other compute shader pass works on the complete height map at once, while this variant above works 
        // only on changed/updated tiles.

        float height = texelFetch(uTextureHeightMap, ivec2(quadXY), pushConstants.lod).x;

        triangleVertices.vertices[(tileMapIndex * tileVertexSize) + tileVertexIndex] = uvec4(
          floatBitsToUint(octPlanetUnsignedDecode(vec2(quadXY) / vec2(totalResolution)) * mix(pushConstants.bottomRadius, pushConstants.topRadius, height)),
          packSnorm2x16(octSignedEncode(normalize(texelFetch(uTextureNormalMap, ivec2(quadXY), pushConstants.lod).xyz)))
        );

#endif        

      }
    
    }

  }

}