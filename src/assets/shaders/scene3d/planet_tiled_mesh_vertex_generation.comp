#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct TriangleVertex {
  vec4 positionAbsoluteHeight;
  vec4 normalRelativeHeight;
};

layout(set = 0, binding = 0, std430) buffer TriangleVertices {
  TriangleVertex vertices[]; // 32 bytes per vertex
} triangleVertices;

layout(set = 0, binding = 1, std430) buffer QueuedTiles {
  uint data[]; // 6-based, because two VkDispatchIndirectCommand structs are stored in the same buffer at the beginning, with three 32-bit unsigned integers each
} queuedTiles;

layout(set = 0, binding = 2) uniform sampler2D uTextureHeightMap; // r32f

layout(set = 0, binding = 3) uniform sampler2D uTextureNormalMap; // rgba16_snorm

layout(push_constant) uniform PushConstants {
  //mat4 modelMatrix;
  float bottomRadius;
  float topRadius;
  uint tileMapResolution;
  uint tileResolution;
} pushConstants;

#include "octahedralmap.glsl"
#include "octahedral.glsl"

void main(){

  const uint queuedTileIndex = uint(gl_GlobalInvocationID.y);
  
  const uint tileMapSize = pushConstants.tileMapResolution * pushConstants.tileMapResolution;

  if((queuedTileIndex < tileMapSize) && (queuedTileIndex < queuedTiles.data[1u])){

    const uint tileMapIndex = queuedTiles.data[queuedTileIndex + 6u];

    if(tileMapIndex < tileMapSize){

      uvec2 tileMapXY;
      tileMapXY.y = tileMapIndex / pushConstants.tileMapResolution;
      tileMapXY.x = tileMapIndex - (tileMapXY.y * pushConstants.tileMapResolution);

      const uint tileVertexSize = pushConstants.tileResolution * pushConstants.tileResolution;

      const uint tileVertexIndex = uint(gl_GlobalInvocationID.x);
      
      if(tileVertexIndex < tileVertexSize){

        uvec2 tileVertexXY;
        tileVertexXY.y = tileVertexIndex / pushConstants.tileResolution;
        tileVertexXY.x = tileVertexIndex - (tileVertexXY.y * pushConstants.tileResolution);

        uvec2 quadXY = (tileMapXY * pushConstants.tileResolution) + tileVertexXY;
        
        uint totalResolution = pushConstants.tileMapResolution * pushConstants.tileResolution;

        //quadXY = uvec2(wrapOctahedralTexelCoordinates(ivec2(quadXY), ivec2(totalResolution)));
        
/*      vec2 uv = (vec2(quadXY) + vec2(0.5)) / vec2(totalResolution);

        // Octahedral wrap
        if((((int(abs(uv.x)) + int(uv.x < 0.0)) ^ (int(abs(uv.y)) + int(uv.y < 0.0))) & 1) != 0){
          uv = vec2(1.0) - fract(uv);
        }else{
          uv = fract(uv);
        }

        uv = fma(uv, vec2(2.0), vec2(-1.0));*/

        vec2 uv = fma(vec2(quadXY) / vec2(totalResolution), vec2(2.0), vec2(-1.0));

#if 1
        vec3 vector;
        {
          const float halfPI = 1.5707963267948966;
          vec2 absUV = abs(uv);
          float absUVSum = absUV.x + absUV.y;
          vec2 s = fma(step(vec2(0.0), uv), vec2(2.0), vec2(-1.0));
          uv = (absUVSum > 1.0) ? ((vec2(1.0) - abs(uv.yx)) * s) : uv;
          vec4 pitchYawSinCos = sin(vec2(vec2(absUVSum, abs(uv.x) / max(1e-17, abs(uv.x) + abs(uv.y))) * halfPI).xxyy + vec2(0.0, halfPI).xyxy); 
          vector = normalize(vec3(pitchYawSinCos.xx * pitchYawSinCos.zw * s.xy, pitchYawSinCos.y).yzx);
        }
#else        
        vec3 vector = vec3(uv.xy, 1.0 - (abs(uv.x) + abs(uv.y)));
        vector = normalize((vector.z < 0.0) ? vec3((1.0 - abs(vector.yx)) * vec2((vector.x < 0.0) ? -1.0 : 1.0, (vector.y < 0.0) ? -1.0 : 1.0), vector.z) : vector);
#endif

        uint texSize = textureSize(uTextureHeightMap, 0).x;
        int lod = (texSize > totalResolution) ? int(log2(float(texSize) / float(totalResolution))) : 0;

        float height = textureCatmullRomOctahedralMap(uTextureHeightMap, vector, lod).x;
        
        vec3 normal = textureCatmullRomOctahedralMap(uTextureNormalMap, vector, lod).xyz;

        uint index = (tileMapIndex * tileVertexSize) + tileVertexIndex;

        float absoluteHeight = mix(pushConstants.bottomRadius, pushConstants.topRadius, height);

        triangleVertices.vertices[index] = TriangleVertex( 
          vec4(vec4(vector, 1.0) * absoluteHeight), 
//        vec4((pushConstants.modelMatrix * vec4(vector * absoluteHeight, 1.0)).xyz, absoluteHeight), 
          vec4(normal, height)
        );    

      }
    
    }

  }

}