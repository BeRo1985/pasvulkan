#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgb10_a2) readonly uniform image2D uSourceTexture;
layout(set = 0, binding = 1, rgb10_a2) writeonly uniform image2D uDestinationTextures[];

layout(push_constant) uniform PushConstants {
  int countMipMapLevels;
} pushConstants;

shared float sharedX[8 * 8];
shared float sharedY[8 * 8];
shared float sharedZ[8 * 8];

/* clang-format on */

vec3 reduceOp(const in vec3 a, const in vec3 b){
  return a + b; // gets normalized later anyway
}

void main() {

  // Maximum four mipmap levels in a single pass, so more mip map levels require multiple passes divided by four mip maps, the remainder must be in
  // pushConstants.countMipMapLevels.

  ivec2 invocationPosition = ivec2(gl_GlobalInvocationID.xy);
              
  ivec2 sourceSize = imageSize(uSourceTexture).xy;

  ivec2 destinationTextureSize = imageSize(uDestinationTextures[0]).xy;

  vec3 normal;

  if(all(lessThan(invocationPosition.xy, sourceSize))){
    mat4x3 normals = mat4x3(
      fma(imageLoad(uSourceTexture, (invocationPosition.xy << 1) + ivec2(0, 0)).xyz, vec3(2.0), vec3(-1.0)),
      fma(imageLoad(uSourceTexture, (invocationPosition.xy << 1) + ivec2(1, 0)).xyz, vec3(2.0), vec3(-1.0)),
      fma(imageLoad(uSourceTexture, (invocationPosition.xy << 1) + ivec2(0, 1)).xyz, vec3(2.0), vec3(-1.0)),
      fma(imageLoad(uSourceTexture, (invocationPosition.xy << 1) + ivec2(1, 1)).xyz, vec3(2.0), vec3(-1.0)) 
    );
    normal = normalize(reduceOp(reduceOp(normals[0], normals[1]), reduceOp(normals[2], normals[3])));
  }else{
    normal = vec3(0.0, 1.0, 0.0);
  } 

  if(all(lessThan(invocationPosition.xy >> 0, destinationTextureSize))){
    imageStore(uDestinationTextures[0], invocationPosition.xy >> 0, vec4(fma(normal.xyz, vec3(0.5), vec3(0.5)), 1.0));
  }
  if(pushConstants.countMipMapLevels == 1){
    return;
  }

  int localInvocationIndex = int(gl_LocalInvocationIndex);

  sharedX[localInvocationIndex] = normal.x;
  sharedY[localInvocationIndex] = normal.y;
  sharedZ[localInvocationIndex] = normal.z;

  barrier();

  destinationTextureSize = max(ivec2(1), destinationTextureSize >> 1);
  
  if((localInvocationIndex & 0x09 /*0b001001*/) == 0){
    normal = normalize(
      reduceOp(
        reduceOp(
          normal, 
          vec3(sharedX[localInvocationIndex + 0x01], sharedY[localInvocationIndex + 0x01], sharedZ[localInvocationIndex + 0x01])
        ), 
        reduceOp(
          vec3(sharedX[localInvocationIndex + 0x08], sharedY[localInvocationIndex + 0x08], sharedZ[localInvocationIndex + 0x08]),
          vec3(sharedX[localInvocationIndex + 0x09], sharedY[localInvocationIndex + 0x09], sharedZ[localInvocationIndex + 0x09])
        )
      )
    );
    if(all(lessThan(invocationPosition.xy >> 1, destinationTextureSize))){
      imageStore(uDestinationTextures[1], invocationPosition.xy >> 1, vec4(fma(normal.xyz, vec3(0.5), vec3(0.5)), 1.0));
    }
    sharedX[localInvocationIndex] = normal.x;
    sharedY[localInvocationIndex] = normal.y;
    sharedZ[localInvocationIndex] = normal.z;
  }
  if(pushConstants.countMipMapLevels == 2){
    return;
  }
  barrier();

  destinationTextureSize = max(ivec2(1), destinationTextureSize >> 1);

  if((localInvocationIndex & 0x1b /*0b011011*/) == 0){
    normal = normalize(
      reduceOp(
        reduceOp(
          normal, 
          vec3(sharedX[localInvocationIndex + 0x02], sharedY[localInvocationIndex + 0x02], sharedZ[localInvocationIndex + 0x02])
        ), 
        reduceOp(
          vec3(sharedX[localInvocationIndex + 0x10], sharedY[localInvocationIndex + 0x10], sharedZ[localInvocationIndex + 0x10]),
          vec3(sharedX[localInvocationIndex + 0x12], sharedY[localInvocationIndex + 0x12], sharedZ[localInvocationIndex + 0x12])
        )
      )
    );
    if(all(lessThan(invocationPosition.xy >> 2, destinationTextureSize))){
      imageStore(uDestinationTextures[2], invocationPosition.xy >> 2, vec4(fma(normal.xyz, vec3(0.5), vec3(0.5)), 1.0));
    }
    sharedX[localInvocationIndex] = normal.x;
    sharedY[localInvocationIndex] = normal.y;
    sharedZ[localInvocationIndex] = normal.z;
  }
  if(pushConstants.countMipMapLevels == 3){
    return;
  }
  barrier();

  destinationTextureSize = max(ivec2(1), destinationTextureSize >> 1);

  if((localInvocationIndex & 0x3f /*0b111111*/) == 0){
    normal = normalize(
      reduceOp(
        reduceOp(
          normal, 
          vec3(sharedX[localInvocationIndex + 0x04], sharedY[localInvocationIndex + 0x04], sharedZ[localInvocationIndex + 0x04])
        ), 
        reduceOp(
          vec3(sharedX[localInvocationIndex + 0x20], sharedY[localInvocationIndex + 0x20], sharedZ[localInvocationIndex + 0x20]),
          vec3(sharedX[localInvocationIndex + 0x24], sharedY[localInvocationIndex + 0x24], sharedZ[localInvocationIndex + 0x24])
        )
      )
    );
    if(all(lessThan(invocationPosition.xy >> 3, destinationTextureSize))){
      imageStore(uDestinationTextures[3], invocationPosition.xy >> 3, vec4(fma(normal.xyz, vec3(0.5), vec3(0.5)), 1.0));
    }
  }

}