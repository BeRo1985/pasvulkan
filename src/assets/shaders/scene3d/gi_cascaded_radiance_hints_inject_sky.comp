#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#define OCCLUSION_SAMPLES 0
#define SAMPLES 32

#define INJECT_RSM_COMPUTE_SHADER

// Push contants
layout(push_constant) uniform PushConstants {
  mat4 uTopDownSkyOcclusionMapViewProjectionMatrix;
};

layout(set = 0, binding = 1) uniform sampler2DShadow uTexTopDownSkyOcclusionMap;
layout(set = 0, binding = 2) uniform sampler2D uTexDepthBuffer;
layout(set = 0, binding = 3, rgba16f) coherent uniform image3D uImageSH[]; // The global illumination volume images
layout(set = 0, binding = 4, std430) buffer SkySphericalHarmonicsBuffer {
   vec4 uSkySphericalHarmonics[9];  // The sky spherical harmonics
};

#define GLOBAL_ILLUMINATION_VOLUME_UNIFORM_SET 0
#define GLOBAL_ILLUMINATION_VOLUME_UNIFORM_BINDING 0

#include "global_illumination_cascaded_radiance_hints.glsl"

void main(){

  ivec3 lInvocationPosition = ivec3(gl_GlobalInvocationID.xyz);
  if(all(greaterThanEqual(lInvocationPosition, ivec3(0))) && all(lessThan(lInvocationPosition, uGlobalIlluminationCascadedVolumeSize))){
    
    int lCascadeIndex = lInvocationPosition.z / GI_MAX_DEPTH;
    lInvocationPosition.z -= (lCascadeIndex * GI_MAX_DEPTH);

  #if GI_COMPRESSION == 0
      int lTexIndexOffset = lCascadeIndex * 7;
  #elif GI_COMPRESSION == 1
      int lTexIndexOffset = lCascadeIndex * 5;
  #elif GI_COMPRESSION == 2
      int lTexIndexOffset = lCascadeIndex * 3;
  #else
      #error "GI_COMPRESSION must be 0, 1 or 2"
  #endif   

    if(globalIlluminationVolumeAABBDeltas[lCascadeIndex].w >= 0){
      ivec3 lCacheVolumePosition = lInvocationPosition + globalIlluminationVolumeAABBDeltas[lCascadeIndex].xyz;
      if(all(greaterThanEqual(lCacheVolumePosition, ivec3(0))) && all(lessThan(lCacheVolumePosition, uGlobalIlluminationVolumeSize))){
        // Discard, because in this case, we can use the cached values
        return;    
      }
    }
    
    vec3 lCellSize = (globalIlluminationVolumeAABBMax[lCascadeIndex].xyz - globalIlluminationVolumeAABBMin[lCascadeIndex].xyz) / vec3(uGlobalIlluminationVolumeSize);

    vec3 lPosition = mix(globalIlluminationVolumeAABBMin[lCascadeIndex].xyz,
                         globalIlluminationVolumeAABBMax[lCascadeIndex].xyz,
                         (vec3(lInvocationPosition) + vec3(0.5)) / vec3(uGlobalIlluminationVolumeSize));
     
    vec4 lSamplePositionSpiral = vec4(0.0,                                   // phi
                                      1.0 - ((2.0 / float(SAMPLES)) * 0.5),  // z
                                      2.399963229728653,                     // delta phi  PI * (3.0 - sqrt(5.0)) (golden angle)  
                                      -(1.0 / float(SAMPLES)));              // delta z (1.0 instead 2.0, because hemisphere)

    vec3 lSkySphericalHarmonics[9] = vec3[9](
      uSkySphericalHarmonics[0].xyz, 
      uSkySphericalHarmonics[1].xyz, 
      uSkySphericalHarmonics[2].xyz, 
      uSkySphericalHarmonics[3].xyz, 
      uSkySphericalHarmonics[4].xyz, 
      uSkySphericalHarmonics[5].xyz, 
      uSkySphericalHarmonics[6].xyz, 
      uSkySphericalHarmonics[7].xyz, 
      uSkySphericalHarmonics[8].xyz
    );

#define USE_DIRECT_LIGHTING 0
#if USE_DIRECT_LIGHTING  
    vec3 lSphericalHarmonics[9];
    lSphericalHarmonics[0] = vec3(0.0); 
    lSphericalHarmonics[1] = vec3(0.0); 
    lSphericalHarmonics[2] = vec3(0.0); 
    lSphericalHarmonics[3] = vec3(0.0); 
    lSphericalHarmonics[4] = vec3(0.0); 
    lSphericalHarmonics[5] = vec3(0.0); 
    lSphericalHarmonics[6] = vec3(0.0); 
    lSphericalHarmonics[7] = vec3(0.0); 
    lSphericalHarmonics[8] = vec3(0.0); 
#else
    vec3 lOcculusionSphericalHarmonics[9];
    lOcculusionSphericalHarmonics[0] = vec3(0.0); 
    lOcculusionSphericalHarmonics[1] = vec3(0.0); 
    lOcculusionSphericalHarmonics[2] = vec3(0.0); 
    lOcculusionSphericalHarmonics[3] = vec3(0.0); 
    lOcculusionSphericalHarmonics[4] = vec3(0.0); 
    lOcculusionSphericalHarmonics[5] = vec3(0.0); 
    lOcculusionSphericalHarmonics[6] = vec3(0.0); 
    lOcculusionSphericalHarmonics[7] = vec3(0.0); 
    lOcculusionSphericalHarmonics[8] = vec3(0.0); 
#endif

    for(int lSampleIndex = 0; lSampleIndex < SAMPLES; lSampleIndex++){ 

      float lSamplePositionTheta = acos(lSamplePositionSpiral.y);
      vec3 lSamplePosition = lPosition + (vec3(sin(vec2(lSamplePositionSpiral.xx + vec2(1.5707963267948966, 0.0))) * sin(lSamplePositionTheta), cos(lSamplePositionTheta)).xzy * lCellSize);    
      lSamplePositionSpiral.xy += lSamplePositionSpiral.zw;       

      vec4 lSampleUVWPosition = uTopDownSkyOcclusionMapViewProjectionMatrix * vec4(lSamplePosition, 1.0); 
      lSampleUVWPosition /= lSampleUVWPosition.w;
      vec3 lSampleUVW = vec3(clamp(fma(vec2(lSampleUVWPosition.xy), vec2(0.5), vec2(0.5)), vec2(0.0), vec2(1.0)), lSampleUVWPosition.z);

      vec3 direction = normalize(lSamplePosition - lPosition);

      /*float lFactor = //max(0.0, direction.y) *
                      (1.0 - clamp(texture(uTexTopDownSkyOcclusionMap, lSampleUVW.xy, 0.0).x - lSampleUVW.z, 0.0, 1.0));
//                    texture(uTexTopDownSkyOcclusionMap, lSampleUVW.xyz);      */
      float lFactor;
      {
        const int countOcclusionSamples = 8;
        if(countOcclusionSamples > 0){
          vec2 lValueSum = vec2(0.0);
          for(int lOcclusionSampleIndex = 0; lOcclusionSampleIndex < countOcclusionSamples; lOcclusionSampleIndex++){
            vec3 lOcclusionSamplePosition = mix(lPosition, lSamplePosition, (float(lOcclusionSampleIndex) + 1.0) / float(countOcclusionSamples));
            vec4 lOcclusionSampleUVWPosition = uTopDownSkyOcclusionMapViewProjectionMatrix * vec4(lOcclusionSamplePosition, 1.0); 
            lOcclusionSampleUVWPosition /= lOcclusionSampleUVWPosition.w;
            vec3 lOcclusionSampleUVW = vec3(clamp(fma(vec2(lOcclusionSampleUVWPosition.xy), vec2(0.5), vec2(0.5)), vec2(0.0), vec2(1.0)), lOcclusionSampleUVWPosition.z);
  //        lFactor *= (1.0 - clamp(texture(uTexTopDownSkyOcclusionMap, lOcclusionSampleUVW.xy, 0.0).x - lOcclusionSampleUVW.z, 0.0, 1.0));
            float lOcclusionSample = texture(uTexTopDownSkyOcclusionMap, lOcclusionSampleUVW.xyz);
            float lWeight = 1.0 - (float(lOcclusionSampleIndex) / float(countOcclusionSamples));
            lValueSum += vec2(lOcclusionSample, 1.0) * (lWeight * lWeight);
          }
          lFactor = (lValueSum.y > 0.0) ? (lValueSum.x / lValueSum.y) : 1.0;
        }else{
          lFactor = 1.0;
        }
      }
      if(lFactor < 1e-6){
        continue;
      }
      
#if OCCLUSION_SAMPLES > 0
      float lCurrentVisibility;
      {
        vec4 lTemp = uModelViewProjectionMatrix * vec4(lSamplePosition, 1.0); 
        lTemp /= lTemp.w;
        lCurrentVisibility = (lTemp.z < (((textureLod(uTexDepthBuffer, vec2((lTemp.xy * 0.5) + vec2(0.5)), 0.0).x * 2.0) - 1.0) * 1.1)) ? 1.0 : -1.0; 
      }
      float lDepthVisibility = 1.0; 
      for(int lOcclusionSampleIndex = 1; lOcclusionSampleIndex < OCCLUSION_SAMPLES; lOcclusionSampleIndex++){ 
        vec4 lTemp = uModelViewProjectionMatrix * vec4(mix(lSamplePosition, lPosition, float(lOcclusionSampleIndex) / float(OCCLUSION_SAMPLES)), 1.0); 
        lTemp /= lTemp.w;
        lDepthVisibility -= ((lTemp.z * lCurrentVisibility) < (((textureLod(uTexDepthBuffer, vec2((lTemp.xy * 0.5) + vec2(0.5)), 0.0).x * 2.0) - 1.0) * lCurrentVisibility)) ? 0.0 : (1.0 / float(OCCLUSION_SAMPLES)); 
      } 
      lFactor *= clamp(lDepthVisibility, 0.0, 1.0);
      if(lFactor < 1e-6){
        continue;
      }
#endif 

#if USE_DIRECT_LIGHTING  
      vec3 skyColor = globalIlluminationCompressedSphericalHarmonicsDecodeWithCosineLobe(direction, lSkySphericalHarmonics);
      globalIlluminationCompressedSphericalHarmonicsEncodeAndAccumulate(direction, skyColor * lFactor, lSphericalHarmonics);
#else
      globalIlluminationCompressedSphericalHarmonicsEncodeAndAccumulate(direction, vec3(lFactor), lOcculusionSphericalHarmonics);
#endif

    } 

    // Integrating over a hemisphere so each sample has a weight of (2.0 * PI) / samplecount (uniform solid angle, for each sample)
    float lTopDownSkyOcclusionMapFactor = 6.28318530718 / float(SAMPLES);

    // Integrating over a sphere so each sample has a weight of (4.0 * PI) / samplecount (uniform solid angle, for each sample)
//  float lTopDownSkyOcclusionMapFactor = 12.5663706144 / float(SAMPLES);

#if USE_DIRECT_LIGHTING  
    lSphericalHarmonics[0] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[1] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[2] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[3] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[4] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[5] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[6] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[7] *= lTopDownSkyOcclusionMapFactor; 
    lSphericalHarmonics[8] *= lTopDownSkyOcclusionMapFactor; 
#else
    lOcculusionSphericalHarmonics[0] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[1] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[2] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[3] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[4] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[5] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[6] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[7] *= lTopDownSkyOcclusionMapFactor; 
    lOcculusionSphericalHarmonics[8] *= lTopDownSkyOcclusionMapFactor; 
 
    vec3 lSphericalHarmonics[9];
    globalIlluminationSphericalHarmonicsMultiply(lSphericalHarmonics, lSkySphericalHarmonics, lOcculusionSphericalHarmonics);
#endif

    //lSphericalHarmonics = lSkySphericalHarmonics;

    ivec3 lVolumePosition = lInvocationPosition;

    {
#if GI_COMPRESSION == 0
      vec4 lTSH0 = imageLoad(uImageSH[lTexIndexOffset + 0], lVolumePosition);   
      vec4 lTSH1 = imageLoad(uImageSH[lTexIndexOffset + 1], lVolumePosition);   
      vec4 lTSH2 = imageLoad(uImageSH[lTexIndexOffset + 2], lVolumePosition);   
      vec4 lTSH3 = imageLoad(uImageSH[lTexIndexOffset + 3], lVolumePosition);   
      vec4 lTSH4 = imageLoad(uImageSH[lTexIndexOffset + 4], lVolumePosition);   
      vec4 lTSH5 = imageLoad(uImageSH[lTexIndexOffset + 5], lVolumePosition);   
      vec4 lTSH6 = imageLoad(uImageSH[lTexIndexOffset + 6], lVolumePosition);   
      lSphericalHarmonics[0] += vec3(lTSH0.xyz);
      lSphericalHarmonics[1] += vec3(lTSH0.w, lTSH1.xy);
      lSphericalHarmonics[2] += vec3(lTSH1.zw, lTSH2.x);
      lSphericalHarmonics[3] += vec3(lTSH2.yzw);
      lSphericalHarmonics[4] += vec3(lTSH3.xyz);
      lSphericalHarmonics[5] += vec3(lTSH3.w, lTSH4.xy);
      lSphericalHarmonics[6] += vec3(lTSH4.zw, lTSH5.x);
      lSphericalHarmonics[7] += vec3(lTSH5.yzw);
      lSphericalHarmonics[8] += vec3(lTSH6.xyz);
#elif GI_COMPRESSION == 1
      vec4 lTSH0 = imageLoad(uImageSH[lTexIndexOffset + 0], lVolumePosition);   
      vec4 lTSH1 = imageLoad(uImageSH[lTexIndexOffset + 1], lVolumePosition);   
      vec4 lTSH2 = imageLoad(uImageSH[lTexIndexOffset + 2], lVolumePosition);   
      vec4 lTSH3 = imageLoad(uImageSH[lTexIndexOffset + 3], lVolumePosition);   
      vec4 lTSH4 = imageLoad(uImageSH[lTexIndexOffset + 4], lVolumePosition);   
      lSphericalHarmonics[0] += vec3(lTSH0.xyz);
      lSphericalHarmonics[1] += vec3(lTSH0.w, lTSH1.xy);
      lSphericalHarmonics[2] += vec3(lTSH1.zw, lTSH2.x);
      lSphericalHarmonics[3] += vec3(lTSH2.yzw);
      lSphericalHarmonics[4] += vec3(lTSH3.x, vec2(0.0));
      lSphericalHarmonics[5] += vec3(lTSH3.y, vec2(0.0));
      lSphericalHarmonics[6] += vec3(lTSH3.z, vec2(0.0));
      lSphericalHarmonics[7] += vec3(lTSH3.w, vec2(0.0));
      lSphericalHarmonics[8] += vec3(lTSH4.x, vec2(0.0));
#elif GI_COMPRESSION == 2
      vec4 lTSH0 = imageLoad(uImageSH[lTexIndexOffset + 0], lVolumePosition);   
      vec4 lTSH1 = imageLoad(uImageSH[lTexIndexOffset + 1], lVolumePosition);   
      vec4 lTSH2 = imageLoad(uImageSH[lTexIndexOffset + 2], lVolumePosition);   
      lSphericalHarmonics[0] += vec3(lTSH0.xyz);
      lSphericalHarmonics[1] += vec3(lTSH0.w, vec2(0.0));
      lSphericalHarmonics[2] += vec3(lTSH1.x, vec2(0.0));
      lSphericalHarmonics[3] += vec3(lTSH1.y, vec2(0.0));
      lSphericalHarmonics[4] += vec3(lTSH1.z, vec2(0.0));
      lSphericalHarmonics[5] += vec3(lTSH1.w, vec2(0.0));
      lSphericalHarmonics[6] += vec3(lTSH2.x, vec2(0.0));
      lSphericalHarmonics[7] += vec3(lTSH2.y, vec2(0.0));
      lSphericalHarmonics[8] += vec3(lTSH2.z, vec2(0.0));
#endif
    }

#if GI_COMPRESSION == 0
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[1].yz, lSphericalHarmonics[2].xy));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[2].z, lSphericalHarmonics[3].xyz));
    imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, vec4(lSphericalHarmonics[4].xyz, lSphericalHarmonics[5].x));
    imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, vec4(lSphericalHarmonics[5].yz, lSphericalHarmonics[6].xy));
    imageStore(uImageSH[lTexIndexOffset + 5], lVolumePosition, vec4(lSphericalHarmonics[6].z, lSphericalHarmonics[7].xyz));
    imageStore(uImageSH[lTexIndexOffset + 6], lVolumePosition, vec4(lSphericalHarmonics[8].xyz, 0.0));
#elif GI_COMPRESSION == 1
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[1].yz, lSphericalHarmonics[2].xy));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[2].z, lSphericalHarmonics[3].xyz));
    imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, vec4(lSphericalHarmonics[4].x, lSphericalHarmonics[5].x, lSphericalHarmonics[6].x, lSphericalHarmonics[7].x));
    imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, vec4(lSphericalHarmonics[8].x, vec3(0.0)));
#elif GI_COMPRESSION == 2
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[2].x, lSphericalHarmonics[3].x, lSphericalHarmonics[4].x, lSphericalHarmonics[5].x));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[6].x, lSphericalHarmonics[7].x, lSphericalHarmonics[8].x, 0.0));
#endif      

  }

} 