#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

#ifdef REDUCTION
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
#else
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
#endif

#ifdef MULTIVIEW
#ifdef MSAA
layout(set = 0, binding = 0) uniform sampler2DMSArray uSourceTexture; // Source mipmap level texture
#else
layout(set = 0, binding = 0) uniform sampler2DArray uSourceTexture; // Source mipmap level texture
#endif
#if defined(REDUCTION)                                     
layout(set = 0, binding = 1, r32f) writeonly uniform image2DArray uDestinationTextures[]; // Destination mipmap level image
#else
layout(set = 0, binding = 1, r32f) writeonly uniform image2DArray uDestinationTexture; // Destination mipmap level image
#endif
#else
#ifdef MSAA
layout(set = 0, binding = 0) uniform sampler2DMS uSourceTexture; // Source mipmap level texture
#else
layout(set = 0, binding = 0) uniform sampler2D uSourceTexture; // Source mipmap level texture
#endif
#if defined(REDUCTION)
layout(set = 0, binding = 1, r32f) writeonly uniform image2D uDestinationTextures[]; // Destination mipmap level image
#else
layout(set = 0, binding = 1, r32f) writeonly uniform image2D uDestinationTexture; // Destination mipmap level image
#endif
#endif

#ifdef FIRSTPASS

struct View {
  mat4 viewMatrix;
  mat4 projectionMatrix;
  mat4 inverseViewMatrix;
  mat4 inverseProjectionMatrix;
};

layout(set = 0, binding = 2, std140) uniform uboViews {
  View views[256];
} uView;

layout(push_constant) uniform PushConstants {
  uint countSamples;
  uint viewBaseIndex;
} pushConstants;

mat4 inverseProjectionMatrix;

float linearizeDepth(float z) {
#if 0
  vec2 v = (inverseProjectionMatrix * vec4(vec3(fma(inTexCoord, vec2(2.0), vec2(-1.0)), z), 1.0)).zw;
#else
  vec2 v = fma(inverseProjectionMatrix[2].zw, vec2(z), inverseProjectionMatrix[3].zw);
#endif
#ifdef MSAA       
  return min(-(v.x / v.y), 1e+37); // 1e+37 as the maximum for recover infinity depth later in the shader
#else
  return -(v.x / v.y);
#endif
}

#elif defined(REDUCTION)

layout(push_constant) uniform PushConstants {
  int countMipMapLevels;
} pushConstants;

shared float sharedZ[8 * 8];

#endif

/* clang-format on */

const float DEFAULT_RADIUS_MULTIPLIER = 1.457; // allows us to use different value as compared to ground truth radius to counter inherent screen space biases
const float DEFAULT_FALLOFF_RANGE = 0.615; // distant samples contribute less
const float RADIUS = 0.5;
const float RADIUS_FALLOFF_RANGE = 0.25;
 
const float depthRangeScaleFactor = 0.75; 

const float effectRadius = depthRangeScaleFactor * DEFAULT_RADIUS_MULTIPLIER * RADIUS;
const float falloffRange = DEFAULT_FALLOFF_RANGE * effectRadius;
const float falloffFrom = effectRadius * (1.0 - RADIUS_FALLOFF_RANGE);
const float falloffMul = (-1.0) / falloffRange;
const float falloffAdd = (falloffFrom / falloffRange) + 1.0;

float depthMIPFilter(vec2 depths){
  vec2 weights = clamp(fma(vec2(max(depths.x, depths.y)) - depths, vec2(falloffMul), vec2(falloffAdd)), vec2(0.0), vec2(1.0));
  return dot(weights, depths) / dot(weights, vec2(1.0));
}

float depthMIPFilter(vec4 depths){
  vec4 weights = clamp(fma(vec4(max(max(depths.x, depths.y), max(depths.z, depths.w))) - depths, vec4(falloffMul), vec4(falloffAdd)), vec4(0.0), vec4(1.0));
  return dot(weights, depths) / dot(weights, vec4(1.0));
}

float depthMIPFilter(float depth0, float depth1){
  return depthMIPFilter(vec2(depth0, depth1)); 
}

float depthMIPFilter(float depth0, float depth1, float depth2, float depth3){
  return depthMIPFilter(vec4(depth0, depth1, depth2, depth3)); 
}

void main() {
#if defined(FIRSTPASS)

#ifdef MULTIVIEW
  ivec3 invocationPosition = ivec3(gl_GlobalInvocationID.xyz);
#else
  ivec2 invocationPosition = ivec2(gl_GlobalInvocationID.xy);
#endif

  ivec2 xy = invocationPosition.xy;

#ifdef MULTIVIEW
  ivec3 destinationTextureSize = imageSize(uDestinationTexture);
#else
  ivec2 destinationTextureSize = imageSize(uDestinationTexture);
#endif

#ifdef MULTIVIEW
  if (all(greaterThanEqual(invocationPosition, ivec3(0))) && all(lessThan(invocationPosition, destinationTextureSize)))
#else
  if (all(greaterThanEqual(invocationPosition, ivec2(0))) && all(lessThan(invocationPosition, destinationTextureSize)))
#endif
  {

#ifdef MULTIVIEW
    int viewIndex = int(gl_GlobalInvocationID.z);
    inverseProjectionMatrix = uView.views[pushConstants.viewBaseIndex + uint(viewIndex)].inverseProjectionMatrix;
#else
    inverseProjectionMatrix = uView.views[pushConstants.viewBaseIndex].inverseProjectionMatrix;
#endif
    
#ifdef MSAA       
   
    int countSamplesLimited = min(16, int(pushConstants.countSamples));
    float cachedDepths[16]; 
    float maxDepth = 0.0;        

    for(int i = 0, j = countSamplesLimited; i < j; i++){      
#ifdef MULTIVIEW      
      maxDepth = max(maxDepth, cachedDepths[i] = linearizeDepth(texelFetch(uSourceTexture, ivec3(xy, viewIndex), i).x)); 
#else
      maxDepth = max(maxDepth, cachedDepths[i] = linearizeDepth(texelFetch(uSourceTexture, ivec2(xy), i).x)); 
#endif
    }

    for(int i = 16, j = int(pushConstants.countSamples); i < j; i++){
#ifdef MULTIVIEW      
      float sampleDepth = linearizeDepth(texelFetch(uSourceTexture, ivec3(xy, viewIndex), i).x); 
#else
      float sampleDepth = linearizeDepth(texelFetch(uSourceTexture, ivec2(xy), i).x); 
#endif
      maxDepth = max(maxDepth, sampleDepth);            
    }

    vec2 depthWeightSum = vec2(0.0);
    for(int i = 0, j = countSamplesLimited; i < j; i++){
      float sampleDepth = cachedDepths[i];
      depthWeightSum += vec2(sampleDepth, 1.0) * clamp(fma(maxDepth - sampleDepth, falloffMul, falloffAdd), 0.0, 1.0);
    }
    for(int i = 16, j = int(pushConstants.countSamples); i < j; i++){
#ifdef MULTIVIEW      
      float sampleDepth = linearizeDepth(texelFetch(uSourceTexture, ivec3(xy, viewIndex), i).x);
#else
      float sampleDepth = linearizeDepth(texelFetch(uSourceTexture, ivec2(xy), i).x);
#endif
      depthWeightSum += vec2(sampleDepth, 1.0) * clamp(fma(maxDepth - sampleDepth, falloffMul, falloffAdd), 0.0, 1.0);
    }

    float depth = (depthWeightSum.y > 0.0) ? (depthWeightSum.x / depthWeightSum.y) : 0.0;

    imageStore(uDestinationTexture, invocationPosition, vec4((depth >= 1e+36) ? uintBitsToFloat(0x7f800000u) : depth));

#else

#ifdef MULTIVIEW
    float depth = linearizeDepth(texelFetch(uSourceTexture, ivec3(xy, viewIndex), 0).x);
#else
    float depth = linearizeDepth(texelFetch(uSourceTexture, ivec2(xy), 0).x);
#endif
 
    imageStore(uDestinationTexture, invocationPosition, vec4(depth));

#endif
    

  }

#elif defined(REDUCTION)

  // Maximum four mipmap levels in a single pass, so more mip map levels require multiple passes divided by four mip maps, the remainder must be in
  // pushConstants.countMipMapLevels.

#ifdef MULTIVIEW
  ivec3 invocationPosition = ivec3(gl_GlobalInvocationID.xyz);
#else
  ivec2 invocationPosition = ivec2(gl_GlobalInvocationID.xy);
#endif
             
  vec4 depths;

  ivec2 sourceSize = textureSize(uSourceTexture, 0).xy;

  ivec2 destinationTextureSize = imageSize(uDestinationTextures[0]).xy;

#ifdef MULTIVIEW
  if((sourceSize.x & 1) != 0){
    if((sourceSize.y & 1) != 0){
      // When width and height are odd, 4 bilinear samples (with min or max sampler reduction filter) are used to reduce undersampling.
      depths = vec4(depthMIPFilter(textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.25, 0.25)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x,
                                   textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.75, 0.75)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x,
                                   textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.25, 0.75)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x,
                                   textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.75, 0.25)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x));
    }else{
      // When only width is odd, 2 bilinear samples (with min or max sampler reduction filter) are used to reduce undersampling.
      depths = vec4(depthMIPFilter(textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.25, 0.5)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x,
                                   textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.75, 0.5)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x));
    }      
  }else{
    if((sourceSize.y & 1) != 0){
      // When only height is odd, 2 bilinear samples (with min or max sampler reduction filter) are used to reduce undersampling.
      depths = vec4(depthMIPFilter(textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.5, 0.25)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x,
                                   textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.5, 0.75)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x));
    }else{
      // Otherwise when width and height are even, just one bilinear sample (with min or max sampler reduction filter) is used, since it is already 
      // perfectly 2x2.
      depths = vec4(textureLod(uSourceTexture, vec3((vec2(invocationPosition.xy) + vec2(0.5)) / vec2(destinationTextureSize), float(invocationPosition.z)), 0.0).x);
    }
  }
#else
  if((sourceSize.x & 1) != 0){
    if((sourceSize.y & 1) != 0){
      // When width and height are odd, 4 bilinear samples (with min or max sampler reduction filter) are used to reduce undersampling.
      depths = vec4(depthMIPFilter(textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.25, 0.25)) / vec2(destinationTextureSize), 0.0).x,
                                   textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.75, 0.75)) / vec2(destinationTextureSize), 0.0).x,
                                   textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.25, 0.75)) / vec2(destinationTextureSize), 0.0).x,
                                   textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.75, 0.25)) / vec2(destinationTextureSize), 0.0).x));
    }else{
      // When only width is odd, 2 bilinear samples (with min or max sampler reduction filter) are used to reduce undersampling.
      depths = vec4(depthMIPFilter(textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.25, 0.5)) / vec2(destinationTextureSize), 0.0).x,
                                   textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.75, 0.5)) / vec2(destinationTextureSize), 0.0).x));
    }      
  }else{
    if((sourceSize.y & 1) != 0){
      // When only height is odd, 2 bilinear samples (with min or max sampler reduction filter) are used to reduce undersampling.
      depths = vec4(depthMIPFilter(textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.5, 0.25)) / vec2(destinationTextureSize), 0.0).x,
                                   textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.5, 0.75)) / vec2(destinationTextureSize), 0.0).x));
    }else{
      // Otherwise when width and height are even, just one bilinear sample (with min or max sampler reduction filter) is used, since it is already 
      // perfectly 2x2.
      depths = vec4(textureLod(uSourceTexture, (vec2(invocationPosition.xy) + vec2(0.5)) / vec2(destinationTextureSize), 0.0).x);
    }
  }
#endif
 
  if(all(lessThan(invocationPosition.xy >> 0, destinationTextureSize))){
#ifdef MULTIVIEW
    imageStore(uDestinationTextures[0], ivec3(invocationPosition.xy >> 0, invocationPosition.z), depths.xxxx);
#else
    imageStore(uDestinationTextures[0], invocationPosition.xy >> 0, depths.xxxx);
#endif
  }
  if(pushConstants.countMipMapLevels == 1){
    return;
  }

  int localInvocationIndex = int(gl_LocalInvocationIndex);

  sharedZ[localInvocationIndex] = depths.x;

  barrier();

  destinationTextureSize = max(ivec2(1), destinationTextureSize >> 1);
  
  if((localInvocationIndex & 0x09 /*0b001001*/) == 0){
    depths.y = sharedZ[localInvocationIndex + 0x01];
    depths.z = sharedZ[localInvocationIndex + 0x08];
    depths.w = sharedZ[localInvocationIndex + 0x09];
    depths = vec4(depthMIPFilter(depths));
    if(all(lessThan(invocationPosition.xy >> 1, destinationTextureSize))){
#ifdef MULTIVIEW
      imageStore(uDestinationTextures[1], ivec3(invocationPosition.xy >> 1, invocationPosition.z), depths.xxxx);
#else
      imageStore(uDestinationTextures[1], invocationPosition.xy >> 1, depths.xxxx);
#endif
    }
    sharedZ[localInvocationIndex] = depths.x;
  }
  if(pushConstants.countMipMapLevels == 2){
    return;
  }
  barrier();

  destinationTextureSize = max(ivec2(1), destinationTextureSize >> 1);

  if((localInvocationIndex & 0x1b /*0b011011*/) == 0){
    depths.y = sharedZ[localInvocationIndex + 0x02];
    depths.z = sharedZ[localInvocationIndex + 0x10];
    depths.w = sharedZ[localInvocationIndex + 0x12];
    depths = vec4(depthMIPFilter(depths));
    if(all(lessThan(invocationPosition.xy >> 2, destinationTextureSize))){
#ifdef MULTIVIEW
      imageStore(uDestinationTextures[2], ivec3(invocationPosition.xy >> 2, invocationPosition.z), depths.xxxx);
#else
      imageStore(uDestinationTextures[2], invocationPosition.xy >> 2, depths.xxxx);
#endif
    }
    sharedZ[localInvocationIndex] = depths.x;
  }
  if(pushConstants.countMipMapLevels == 3){
    return;
  }
  barrier();

  destinationTextureSize = max(ivec2(1), destinationTextureSize >> 1);

  if((localInvocationIndex & 0x3f /*0b111111*/) == 0){
    depths.y = sharedZ[localInvocationIndex + 0x04];
    depths.z = sharedZ[localInvocationIndex + 0x20];
    depths.w = sharedZ[localInvocationIndex + 0x24];
    depths = vec4(depthMIPFilter(depths));
    if(all(lessThan(invocationPosition.xy >> 3, destinationTextureSize))){
#ifdef MULTIVIEW
      imageStore(uDestinationTextures[3], ivec3(invocationPosition.xy >> 3, invocationPosition.z), depths.xxxx);
#else
      imageStore(uDestinationTextures[3], invocationPosition.xy >> 3, depths.xxxx);
#endif
    }
  }

#else 

  #error "No pass defined"

#endif  
}

