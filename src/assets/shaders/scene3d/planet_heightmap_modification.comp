#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, r32f) uniform image2D uImageHeightMap;

layout(set = 0, binding = 1) buffer BufferTileDirtyMap{
  uint data[]; // bitwise dirty map
} bufferTileDirtyMap;

layout(push_constant) uniform PushConstants {
  vec4 positionRadius; // xyz = position, w = radius
  vec4 innerRadiusValueMinMax; // x = inner radius, y = value, z = min, w = max
  uvec4 dirtySizeShift; // x = dirty size, y = shift
} pushConstants;

/* clang-format on */

#include "octahedralmap.glsl"
#include "octahedral.glsl"

void main(){
  
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

  ivec2 texSize = imageSize(uImageHeightMap);

  if(all(greaterThanEqual(texel, ivec2(0))) && all(lessThan(texel, texSize))){

    float d = smoothstep(
      0.0,
      -pushConstants.innerRadiusValueMinMax.x,
      length(octDecode(fma(vec2(texel) + vec2(0.5), vec2(2.0) / vec2(texSize), vec2(-1.0))) - pushConstants.positionRadius.xyz) - pushConstants.positionRadius.w
    );

    if(d > 0.0){

      // When we are on the dirty map tile corner, we need to update the adjacent tiles as well, otherwise we can only update the current tile.
/*    uint tileDirtyMapMask = pushConstants.dirtySizeShift.x - 1u; // Size is always a power of two, so we can convert it to a mask easily.
      uvec2 tileDirtyMapFractionalXY = uvec2(texel) & uvec2(tileDirtyMapMask);
      if(any(equal(tileDirtyMapFractionalXY, uvec2(0))) || any(equal(tileDirtyMapFractionalXY, uvec2(tileDirtyMapMask)))){
        const ivec2 minXY = ivec2((tileDirtyMapFractionalXY.x == 0u) ? -1 : 0, (tileDirtyMapFractionalXY.y == 0u) ? -1 : 0);
        const ivec2 maxXY = ivec2((tileDirtyMapFractionalXY.x == tileDirtyMapMask) ? 1 : 0, (tileDirtyMapFractionalXY.y == tileDirtyMapMask) ? 1 : 0);
        for(int y = minXY.y; y <= maxXY.y; y++){
          for(int x = minXY.x; x <= maxXY.x; x++){
            uvec2 tileDirtyMapXY = uvec2(wrapOctahedralTexelCoordinates(ivec2(texel) + ivec2(x, y), ivec2(texSize))) >> pushConstants.dirtySizeShift.y;
            uint tileDirtyMapIndex = (tileDirtyMapXY.y * pushConstants.dirtySizeShift.x) + tileDirtyMapXY.x;
            atomicOr(bufferTileDirtyMap.data[tileDirtyMapIndex >> 5u], 1u << (tileDirtyMapIndex & 31u));
          }
        }
        // Commented out code, because the CPU expands the dirty map in the moment anyway.
      }else*/{
        uvec2 tileDirtyMapXY = uvec2(texel) >> pushConstants.dirtySizeShift.y;
        uint tileDirtyMapIndex = (tileDirtyMapXY.y * pushConstants.dirtySizeShift.x) + tileDirtyMapXY.x;
        atomicOr(bufferTileDirtyMap.data[tileDirtyMapIndex >> 5u], 1u << (tileDirtyMapIndex & 31u));
      } 
    
      imageStore(
        uImageHeightMap, 
        texel, 
        vec4(
          clamp(
            imageLoad(uImageHeightMap, texel).x + (d * pushConstants.innerRadiusValueMinMax.y), 
            pushConstants.innerRadiusValueMinMax.z, 
            pushConstants.innerRadiusValueMinMax.w
          )
        )
      );

    }

  }

}

