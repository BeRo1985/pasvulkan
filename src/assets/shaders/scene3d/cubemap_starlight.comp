#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(push_constant, std140) uniform PushConstants {
  vec4 lightDirectionIntensityFactor; // xyz = light direction, w = intensity factor
} pushConstants;

/* clang-format on */

#ifdef USE_RGB9E5
layout(set = 0, binding = 0, r32ui) writeonly uniform uimageCube uDestinationTexture;
#else
layout(set = 0, binding = 0) writeonly uniform imageCube uDestinationTexture;
#endif

ivec2 destinationTextureSize = imageSize(uDestinationTexture);

#include "cubemap.glsl"

#ifdef USE_RGB9E5
#include "rgb9e5.glsl"
#endif

#define COMPUTE_DERIVATIVES
#include "env_starlight.glsl"

void main() {
  ivec3 uvw = ivec3(gl_GlobalInvocationID.xyz);
  if (all(greaterThanEqual(uvw, ivec3(0))) && all(lessThan(uvw, ivec3(destinationTextureSize, 6)))) {
    vec3 direction = getCubeMapDirection((vec2(uvw.xy) + vec2(0.5)) / vec2(destinationTextureSize), uvw.z);
    vec3 directionX = getCubeMapDirection((vec2(uvw.xy) + vec2(1.5, 0.5)) / vec2(destinationTextureSize), uvw.z);
    vec3 directionY = getCubeMapDirection((vec2(uvw.xy) + vec2(0.5, 1.5)) / vec2(destinationTextureSize), uvw.z);
    vec4 c = vec4(vec3(getStarlight(direction, directionX, directionY)) * pushConstants.lightDirectionIntensityFactor.w, 1.0);
#ifdef USE_RGB9E5
    imageStore(uDestinationTexture, uvw, uvec4(encodeRGB9E5(c.xyz)));
#else
    imageStore(uDestinationTexture, uvw, c);
#endif
  }
}