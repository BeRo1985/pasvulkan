#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
  uint indexOffset;
  uint countIndices;
} pushConstants;

struct InPackedVertex {
  uvec4 positionNodeIndex;
  uvec4 normalTangentTexCoord0;
  uvec4 texCoord1Color0;
  uvec4 morphTargetVertexBaseIndexJointBlockBaseIndexFlagsMaterialID;
};

struct OutPackedVertex {
  uvec4 positionMaterialID;
  uvec4 normalSignTangent;
  uvec4 texCoord0TexCoord1;
  uvec4 color0ModelScale;
};

struct MorphTargetVertex {
   vec4 position;
   vec4 normal;
   vec4 tangent;
   uvec4 metaData; // x = index, y = next
};

// Mesh descriptor set

layout(std430, set = 0, binding = 0) buffer InVertices {
  InPackedVertex inVertices[];
};

layout(std430, set = 0, binding = 1) buffer OutVertices {
  OutPackedVertex outVertices[];
};

layout(std430, set = 0, binding = 2) buffer InIndices {
  uint inIndices[];
};

layout(std430, set = 0, binding = 3) buffer MorphTargetVertices {
  MorphTargetVertex morphTargetVertices[];
};

struct JointBlock {
  uvec4 joints;
  vec4 weights;
};

layout(std430, set = 0, binding = 4) buffer JointBlocks {
  JointBlock jointBlocks[];
};

layout(std430, set = 0, binding = 5) buffer NodeMatrices {
  mat4 nodeMatrices[];
};

layout(std430, set = 0, binding = 6) buffer MorphTargetWeights {
  float morphTargetWeights[];
};

layout(std430, set = 0, binding = 7) buffer MaterialIDMap {
  uint materialIDMap[];
};

/* clang-format on */

vec3 octDecode(vec2 oct) {
  vec3 v = vec3(oct.xy, 1.0 - (abs(oct.x) + abs(oct.y)));
  if (v.z < 0.0) {
    v.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? 1.0 : -1.0, (v.y >= 0.0) ? 1.0 : -1.0);
  }
  return normalize(v);
}

void main() {
  uint vertexIndex = gl_GlobalInvocationID.x;
  // uint vertexIndex = uint((((gl_GlobalInvocationID.z * gl_WorkGroupSize.y) + gl_GlobalInvocationID.y) * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x);
  if (vertexIndex < pushConstants.countIndices) {
    vertexIndex = inIndices[vertexIndex + pushConstants.indexOffset];
    {
      InPackedVertex inPackedVertex = inVertices[vertexIndex];
      vec3 inPosition = uintBitsToFloat(inPackedVertex.positionNodeIndex.xyz);
      uint inNodeIndex = inPackedVertex.positionNodeIndex.w;
      vec2 inNormal = unpackSnorm2x16(inPackedVertex.normalTangentTexCoord0.x);
      vec2 inTangent = unpackSnorm2x16(inPackedVertex.normalTangentTexCoord0.y);
      // vec2 inTexCoord0 = uintBitsToFloat(inPackedVertex.normalTangentTexCoord0.zw);
      // vec2 inTexCoord1 = uintBitsToFloat(inPackedVertex.texCoord1Color0.xy);
      // vec4 inColor0 = vec4(unpackHalf2x16(inPackedVertex.texCoord1Color0.z), unpackHalf2x16(inPackedVertex.texCoord1Color0.w));
      uint inMorphTargetVertexBaseIndex = inPackedVertex.morphTargetVertexBaseIndexJointBlockBaseIndexFlagsMaterialID.x;
      uint inJointBlockBaseIndex = inPackedVertex.morphTargetVertexBaseIndexJointBlockBaseIndexFlagsMaterialID.y;
      uint inCountJointBlocks = inPackedVertex.morphTargetVertexBaseIndexJointBlockBaseIndexFlagsMaterialID.z & 0xffffu;
      uint inFlags = inPackedVertex.morphTargetVertexBaseIndexJointBlockBaseIndexFlagsMaterialID.z >> 16u;
      uint inMaterialID = inPackedVertex.morphTargetVertexBaseIndexJointBlockBaseIndexFlagsMaterialID.w;

      mat4 nodeMatrix = nodeMatrices[inNodeIndex];

      mat4 modelNodeMatrix = nodeMatrices[0] * nodeMatrix;
	  
      vec3 position = inPosition;

      mat3 tangentSpace;
      {
        vec3 tangent = octDecode(inTangent);
        vec3 normal = octDecode(inNormal);
        tangentSpace = mat3(tangent, normalize(cross(normal, tangent)) * (((inFlags & (1u << 0)) != 0) ? -1.0 : 1.0), normal);
      }
      // mat3 tangentSpace = mat3(inTangent.xyz, cross(inTangent.xyz, inNormal) * inTangent.w, inNormal);

      if (inMorphTargetVertexBaseIndex != 0xffffffffu) {
        vec4 normal = vec4(tangentSpace[2], 0.0f);
        vec4 tangent = vec4(tangentSpace[0], sign(dot(cross(tangentSpace[2], tangentSpace[0]), tangentSpace[1])));
        uint morphTargetVertexIndex = inMorphTargetVertexBaseIndex;
        uint protectionCounter = 0x0ffffu;
        while ((morphTargetVertexIndex != 0xffffffffu) && (protectionCounter-- > 0u)) {
          MorphTargetVertex morphTargetVertex = morphTargetVertices[morphTargetVertexIndex];
          float weight = morphTargetWeights[morphTargetVertex.metaData.x];
          position += morphTargetVertex.position.xyz * weight;
          normal += vec4(morphTargetVertex.normal.xyz, 1.0) * weight;
          tangent.xyz += morphTargetVertex.tangent.xyz * weight;
          morphTargetVertexIndex = morphTargetVertex.metaData.y;
        }
        normal.xyz = normalize(normal.xyz);
        tangent.xyz = normalize(tangent.xyz);
        tangentSpace = mat3(tangent.xyz, normalize(cross(normal.xyz, tangent.xyz) * tangent.w), normal.xyz);
      }

      if (inCountJointBlocks > 0u) {
        mat4 inverseNodeMatrix = inverse(nodeMatrix);
        mat4 skinMatrix = mat4(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f);
        for (uint jointBlockBaseIndex = inJointBlockBaseIndex, endJointBlockBaseIndex = jointBlockBaseIndex + inCountJointBlocks;  //
             jointBlockBaseIndex < endJointBlockBaseIndex;                                                                         //
             jointBlockBaseIndex++) {
          JointBlock jointBlock = jointBlocks[jointBlockBaseIndex];
          skinMatrix += ((inverseNodeMatrix * nodeMatrices[jointBlock.joints.x]) * jointBlock.weights.x) +  //
                        ((inverseNodeMatrix * nodeMatrices[jointBlock.joints.y]) * jointBlock.weights.y) +  //
                        ((inverseNodeMatrix * nodeMatrices[jointBlock.joints.z]) * jointBlock.weights.z) +  //
                        ((inverseNodeMatrix * nodeMatrices[jointBlock.joints.w]) * jointBlock.weights.w);
        }
        modelNodeMatrix *= skinMatrix;
      }

      mat3 normalMatrix = transpose(inverse(mat3(modelNodeMatrix)));

      tangentSpace = normalMatrix * tangentSpace;

      vec4 p = modelNodeMatrix * vec4(position.xyz, 1.0);
      position = p.xyz / p.w;

      {
	  
        vec3 tangent = normalize(tangentSpace[0]);
        vec3 bitangent = normalize(tangentSpace[1]);
        vec3 normal = normalize(tangentSpace[2]);

        float tbnSign = (dot(normalize(cross(normal, tangent)), bitangent) < 0.0) ? -1.0 : 1.0;

        vec3 modelScale = vec3(length(modelNodeMatrix[0].xyz), length(modelNodeMatrix[1].xyz), length(modelNodeMatrix[2].xyz));

        OutPackedVertex outPackedVertex;
        outPackedVertex.positionMaterialID = uvec4(uvec3(floatBitsToUint(position.xyz)), materialIDMap[inMaterialID]);
        outPackedVertex.normalSignTangent = uvec4(packSnorm2x16(normal.xy), packSnorm2x16(vec2(normal.z, tbnSign)),  //
                                                  packSnorm2x16(tangent.xy), packSnorm2x16(vec2(tangent.z, 0.0)));
        outPackedVertex.texCoord0TexCoord1 = uvec4(inPackedVertex.normalTangentTexCoord0.zw /*uvec2(floatBitsToUint(texCoord0.xy))*/,  //
                                                   inPackedVertex.texCoord1Color0.xy /* uvec2(floatBitsToUint(texCoord1.xy)) */);
        outPackedVertex.color0ModelScale = uvec4(inPackedVertex.texCoord1Color0.zw /*uvec2(packHalf2x16(color.xy), packHalf2x16(color.zw))*/,  //
                                                 vec2(packHalf2x16(modelScale.xy), packHalf2x16(vec2(modelScale.z, 0.0))));                    //
        outVertices[vertexIndex] = outPackedVertex;
      }
    }
  }
}
