#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) buffer IcosphereTriangleIndices {
  uint indices[]; // 20-based, because 0 to 19 are the count of per face indices, to save a second buffer just for the count
} icosphereTriangleIndices;

layout(push_constant) uniform PushConstants {
  uint resolution;
} pushConstants;

/* clang-format on */

void main(){

  uint linearIndex = uint(gl_GlobalInvocationID.x);
  
  uint faceIndex = uint(gl_GlobalInvocationID.y);

  const uint resolution = pushConstants.resolution;

  const uint count = (((resolution + 1) * (resolution + 2)) / 2);

  if(linearIndex < count){

    const uint countTriangleIndicesPerFace = ((resolution + 3u) * (resolution + 2u)) >> 1u;

    const uint baseIndexOffset = countTriangleIndicesPerFace * faceIndex;

    const uint rowIndex = uint(int(resolution - int(floor(sqrt((float(count - (linearIndex + 1u)) * 2.0) + 0.25) - 0.5))));
    const uint columnIndex = ((resolution + 1u) - rowIndex) - ((count - linearIndex) - (((((resolution - rowIndex) * ((resolution - rowIndex) + 1u)) >> 1u))));

    const uint baseC = uint(int(int(rowIndex) * ((2 * (int(resolution) + 2)) - (int(rowIndex) - 1)))) >> 1u;
     
    const uint c = baseC + columnIndex;

    // get index of next vertex on this row 
    const uint next = c + ((resolution + 2u) - rowIndex);

    // get count of indices to add
    const uint countIndicesToAdd = (columnIndex > 0u) ? 6u : 3u;

    // get base index to write to
    const uint indicesBaseIndex = atomicAdd(icosphereTriangleIndices.indices[faceIndex], countIndicesToAdd) + ((((resolution + 1u) * (resolution + 1u)) * 3u) * faceIndex) + 20u;

    icosphereTriangleIndices.indices[indicesBaseIndex + 0u] = baseIndexOffset + c; // current vertex
    icosphereTriangleIndices.indices[indicesBaseIndex + 1u] = baseIndexOffset + c + 1u; // the next vertex on this row
    icosphereTriangleIndices.indices[indicesBaseIndex + 2u] = baseIndexOffset + next; // the next vertex on the next row

    // add down pointing triangles, when we're not on the last row
    if(columnIndex > 0u){
      icosphereTriangleIndices.indices[indicesBaseIndex + 3u] = baseIndexOffset + c;
      icosphereTriangleIndices.indices[indicesBaseIndex + 4u] = baseIndexOffset + next;
      icosphereTriangleIndices.indices[indicesBaseIndex + 5u] = (baseIndexOffset + next) - 1u;
    }

  }

}
