#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

/* clang-format off */

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer TileMapExpandedDirtyBuffer {
  uint data[]; // bitwise dirty map
} tileMapExpandedDirtyBuffer;

layout(set = 0, binding = 1, std430) buffer QueuedTiles {
  uint data[]; // 3-based, 0 is squared tile resolution, 1 is count of queued tiles, and 2 is just one (for VkDispatchIndirectCommand, which is a struct of 3 32-bit uints) 
} queuedTiles;

layout(push_constant) uniform PushConstants {
  uint tileMapResolution;
  uint tileResolution;
} pushConstants;

void main() {
  const uvec2 tileMapXY = uvec2(gl_GlobalInvocationID.xy);
  if(all(equal(tileMapXY, uvec2(0u, 0u)))){
    queuedTiles.data[0] = ((pushConstants.tileResolution * pushConstants.tileResolution) + 255u) >> 8u; // 256 tile positions per dispatch local group
//  queuedTiles.data[1] = 0u; // already zeroed through VkCmdFillBuffer, otherwise it can also occur a race-condition since this shader is executed in parallel. For the other two values, it's not a problem since they are only written to once and aren't used here in this shader elsewhere.
    queuedTiles.data[2] = 1u;
  }
  if(all(lessThan(tileMapXY, uvec2(pushConstants.tileMapResolution)))){
    const uint index = (tileMapXY.y * pushConstants.tileMapResolution) + tileMapXY.x;
    if((tileMapExpandedDirtyBuffer.data[index >> 5] & (1u << (index & 31u))) != 0u){
      queuedTiles.data[atomicAdd(queuedTiles.data[1], 1u) + 3u] = index;
    }
  }
}
