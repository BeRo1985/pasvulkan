#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2DArray uImageBlendMap;

layout(set = 0, binding = 1) uniform sampler2DArray uBrushTextureArray;

layout(push_constant) uniform PushConstants {
  vec4 positionRadius; // xyz = position, w = radius
  vec4 innerRadiusValueMinMax; // x = inner radius, y = value, z = min, w = max
  uint layerIndexFlags;
  uint brushIndex;
  float brushRotation;
} pushConstants;

/* clang-format on */

#include "octahedral.glsl"
#include "octahedralmap.glsl"

void main(){
  
  const uint layerIndex = pushConstants.layerIndexFlags & 0xffu;
  const uint flags = pushConstants.layerIndexFlags >> 16u;

  ivec3 texel = ivec3(gl_GlobalInvocationID.xy, int(layerIndex >> 2u)); // four layers per texel (RGBA), one per color channel 

  ivec3 texSize = imageSize(uImageBlendMap);

  if(all(greaterThanEqual(texel, ivec3(0))) && all(lessThan(texel, texSize))){

    vec3 p = octPlanetUnsignedDecode(vec2(texel) / vec2(texSize.xy));

    vec3 n = normalize(pushConstants.positionRadius.xyz);

    float d;

    if(pushConstants.brushIndex == 0u){

      // Just a circle brush
     
      d = smoothstep(
        0.0,
        -pushConstants.innerRadiusValueMinMax.x,
        length(p - n) - pushConstants.positionRadius.w
      );

    }else if(pushConstants.brushIndex <= 255u){

      // Brush texture

      vec3 t = n.yzx - n.zxy, 
           b = normalize(cross(n, t = normalize(t - dot(t, n)))),
           o = p - n;
      if(pushConstants.brushRotation != 0.0){
        const vec2 rotationSinCos = sin(vec2(pushConstants.brushRotation) + vec2(0.0, 1.57079632679));
        const vec3 ot = t, ob = b;
        t = (ot * rotationSinCos.y) - (ob * rotationSinCos.x);
        b = (ot * rotationSinCos.x) + (ob * rotationSinCos.y);
      }
      vec2 uv = vec2(dot(o, t), dot(o, b)) / pushConstants.positionRadius.w;
      d = smoothstep(1.0, 1.0 - (1.0 / length(textureSize(uBrushTextureArray, 0).xy)), max(abs(uv.x), abs(uv.y)));

      d *= smoothstep(-1e-4, 1e-4, dot(p, n)); // When we are on the back side of the planet, we need to clear the brush, but smoothly.

      if(d > 0.0){
        d *= textureLod(uBrushTextureArray, vec3(fma(uv, vec2(0.5), vec2(0.5)), float(pushConstants.brushIndex)), 0.0).x;
      } 

    }else{

      // No brush

      d = 0.0;

    }

    if(d > 0.0){

      if((flags & 1u) != 0u){

        for(uint layerTopLevelIndex = 0, countTopLevels = texSize.z; layerTopLevelIndex < countTopLevels; layerTopLevelIndex++){

          ivec3 texelTopLevel = ivec3(texel.xy, int(layerTopLevelIndex));

          vec4 blendMapValues = imageLoad(uImageBlendMap, texelTopLevel);

          uvec4 targetLayerIndices = uvec4(layerTopLevelIndex << 2u) | uvec4(0u, 1u, 2u, 3u);

          blendMapValues = clamp(
            blendMapValues + (vec4(d * pushConstants.innerRadiusValueMinMax.y) * mix(vec4(-1.0), vec4(1.0), vec4(equal(targetLayerIndices, uvec4(layerIndex))))),
            pushConstants.innerRadiusValueMinMax.zzzz,
            pushConstants.innerRadiusValueMinMax.wwww
          );

          imageStore(uImageBlendMap, texelTopLevel, blendMapValues);

        }

      }else{

        vec4 blendMapValues = imageLoad(uImageBlendMap, texel);

        blendMapValues[layerIndex & 3u] = clamp(
          blendMapValues[layerIndex & 3u] + (d * pushConstants.innerRadiusValueMinMax.y),
          pushConstants.innerRadiusValueMinMax.z,
          pushConstants.innerRadiusValueMinMax.w
        );

        imageStore(uImageBlendMap, texel, blendMapValues);

      }
         

    }

  }

}

