#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2DArray uImageBlendMap;

layout(set = 0, binding = 1) uniform sampler2DArray uBrushTextureArray;

layout(push_constant) uniform PushConstants {
  vec4 positionRadius; // xyz = position, w = radius
  vec4 innerRadiusValueMinMax; // x = inner radius, y = value, z = min, w = max
  uvec4 layerIndexBrushIndex; // x = layer index, y = brush index
} pushConstants;

/* clang-format on */

#include "octahedral.glsl"
#include "octahedralmap.glsl"

void main(){
  
  ivec3 texel = ivec3(gl_GlobalInvocationID.xy, int(pushConstants.layerIndexBrushIndex.x >> 2u)); // four layers per texel (RGBA), one per color channel 

  ivec3 texSize = imageSize(uImageBlendMap);

  if(all(greaterThanEqual(texel, ivec3(0))) && all(lessThan(texel, texSize))){

    vec3 p = octPlanetUnsignedDecode(vec2(texel) / vec2(texSize));

    vec3 n = normalize(pushConstants.positionRadius.xyz);

    float d;

    if(pushConstants.layerIndexBrushIndex.y == 0u){

      // Just a circle brush
     
      d = smoothstep(
        0.0,
        -pushConstants.innerRadiusValueMinMax.x,
        length(p - n) - pushConstants.positionRadius.w
      );

    }else if(pushConstants.layerIndexBrushIndex.y <= 255u){

      // Brush texture

      vec3 t = n.yzx - n.zxy, 
           b = normalize(cross(n, t = normalize(t - dot(t, n)))),
           o = p - n;
      vec2 uv = vec2(dot(o, t), dot(o, b)) / pushConstants.positionRadius.w;
      d = smoothstep(1.0, 1.0 - (1.0 / length(textureSize(uBrushTextureArray, 0).xy)), max(abs(uv.x), abs(uv.y)));

      d *= smoothstep(-1e-4, 1e-4, dot(p, n)); // When we are on the back side of the planet, we need to clear the brush, but smoothly.

      if(d > 0.0){
        d *= textureLod(uBrushTextureArray, vec3(fma(uv, vec2(0.5), vec2(0.5)), float(pushConstants.layerIndexBrushIndex.y)), 0.0).x;
      } 

    }else{

      // No brush

      d = 0.0;

    }

    if(d > 0.0){

      vec4 blendMapValues = imageLoad(uImageBlendMap, texel);

      blendMapValues[pushConstants.layerIndexBrushIndex.x & 3u] = clamp(
        blendMapValues[pushConstants.layerIndexBrushIndex.x & 3u] + (d * pushConstants.innerRadiusValueMinMax.y),
        pushConstants.innerRadiusValueMinMax.z,
        pushConstants.innerRadiusValueMinMax.w
      );
          
      imageStore(uImageBlendMap, texel, blendMapValues);

    }

  }

}

