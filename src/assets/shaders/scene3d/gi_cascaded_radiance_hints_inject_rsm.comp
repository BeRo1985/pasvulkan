#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#define OCCLUSION_SAMPLES 4
#define SAMPLES 32

#define INJECT_RSM_COMPUTE_SHADER

layout(set = 0, binding = 1) uniform sampler2D uTexture2DInputs[]; // 0 = RSM color, 1 = RSM depth, 2 = RSM depth, 3 = depth buffer
layout(set = 0, binding = 2, rgba16f) coherent uniform image3D uImageSH[]; // The global illumination volume images
layout(set = 0, binding = 3, rgba32f) coherent uniform image3D uImageMetaInfo[]; // The global illumination volume meta info image
layout(set = 0, binding = 4, std140) uniform uMetaData {
  mat4 uWorldToReflectiveShadowMapMatrix;
  mat4 uReflectiveShadowMapToWorldMatrix;
  mat4 uModelViewProjectionMatrix;
  vec4 uLightDirection;
  vec4 uLightPosition;
  vec4 uSpread;
};

#define uTexReflectiveShadowMapColor uTexture2DInputs[0]
#define uTexReflectiveShadowMapNormal uTexture2DInputs[1]
#define uTexReflectiveShadowMapDepth uTexture2DInputs[2]
#define uTexDepthBuffer uTexture2DInputs[3]

#define GLOBAL_ILLUMINATION_VOLUME_UNIFORM_SET 0
#define GLOBAL_ILLUMINATION_VOLUME_UNIFORM_BINDING 0

#include "global_illumination_cascaded_radiance_hints.glsl"

void main(){

  ivec3 lInvocationPosition = ivec3(gl_GlobalInvocationID.xyz);
  if(all(greaterThanEqual(lInvocationPosition, ivec3(0))) && all(lessThan(lInvocationPosition, uGlobalIlluminationCascadedVolumeSize))){
    
    int lCascadeIndex = lInvocationPosition.z / GI_MAX_DEPTH;
    lInvocationPosition.z -= (lCascadeIndex * GI_MAX_DEPTH);

  #if GI_COMPRESSION == 0
      int lTexIndexOffset = lCascadeIndex * 7;
  #elif GI_COMPRESSION == 1
      int lTexIndexOffset = lCascadeIndex * 5;
  #elif GI_COMPRESSION == 2
      int lTexIndexOffset = lCascadeIndex * 3;
  #else
      #error "GI_COMPRESSION must be 0, 1 or 2"
  #endif   

    if(globalIlluminationVolumeAABBDeltas[lCascadeIndex].w >= 0){
      ivec3 lCacheVolumePosition = lInvocationPosition + globalIlluminationVolumeAABBDeltas[lCascadeIndex].xyz;
      if(all(greaterThanEqual(lCacheVolumePosition, ivec3(0))) && all(lessThan(lCacheVolumePosition, uGlobalIlluminationVolumeSize))){
        // Discard, because in this case, we can use the cached values
        return;    
      }
    }
    
    vec3 lGlobalIlluminationVolumeAABBMin = globalIlluminationVolumeAABBMin[lCascadeIndex].xyz;   
    vec3 lGlobalIlluminationVolumeAABBMax = globalIlluminationVolumeAABBMax[lCascadeIndex].xyz;   
      
    vec3 lStratum = (lGlobalIlluminationVolumeAABBMax - lGlobalIlluminationVolumeAABBMin) / vec3(uGlobalIlluminationVolumeSize); 
    float lStratumLength = length(lStratum); 
    vec3 lPosition = lGlobalIlluminationVolumeAABBMin + (vec3(lInvocationPosition) * lStratum); 

    vec4 lBaseUVPos = uWorldToReflectiveShadowMapMatrix * vec4(lPosition + vec3(0.01), 1.0); 
    vec2 lBaseUV = clamp(vec2((((lBaseUVPos.xy / lBaseUVPos.w) * 0.5) * sign(dot(uLightDirection.xyz, lPosition - uLightPosition.xyz))) + vec2(0.5)), vec2(0.0),vec2(1.0));
    lBaseUV = clamp(lBaseUV, vec2(0.499 * uSpread.xy), vec2(1.0 - (0.499 * uSpread.xy))) - vec2(0.5 * uSpread.xy);
    
    float lMinimumDistance = 65536.0, lMaximumDistance = 0.0; 

    vec3 lSphericalHarmonics[9];
    lSphericalHarmonics[0] = vec3(0.0); 
    lSphericalHarmonics[1] = vec3(0.0); 
    lSphericalHarmonics[2] = vec3(0.0); 
    lSphericalHarmonics[3] = vec3(0.0); 
    lSphericalHarmonics[4] = vec3(0.0); 
    lSphericalHarmonics[5] = vec3(0.0); 
    lSphericalHarmonics[6] = vec3(0.0); 
    lSphericalHarmonics[7] = vec3(0.0); 
    lSphericalHarmonics[8] = vec3(0.0); 
    
    vec4 lSamplePositionSpiral = vec4(0.0,                                   // phi
                                      1.0 - ((2.0 / float(SAMPLES)) * 0.5),  // z
                                      2.399963229728653,                     // delta phi  PI * (3.0 - sqrt(5.0)) (golden angle)  
                                      -(2.0 / float(SAMPLES)));              // delta z
  
    for(int lSampleIndex = 0; lSampleIndex < SAMPLES; lSampleIndex++){
      
      // 2.399963229728653 = PI * (3.0 - sqrt(5.0)) (golden angle) 
      vec2 lSampleUV = lBaseUV + ((sin(vec2(vec2(float(lSampleIndex) * 2.399963229728653) + vec2(1.5707963267948966, 0.0))) * sqrt((float(lSampleIndex) + 0.5) / float(SAMPLES))) * uSpread.xy); 

      float lSamplePositionTheta = acos(lSamplePositionSpiral.y);
      vec3 lSamplePosition = lPosition + ((vec3(sin(vec2(lSamplePositionSpiral.xx + vec2(1.5707963267948966, 0.0))) * sin(lSamplePositionTheta), cos(lSamplePositionTheta)).xzy * 0.5) * lStratum);
      lSamplePositionSpiral.xy += lSamplePositionSpiral.zw;     

      vec4 lReflectiveShadowMapNormalUsed = textureLod(uTexReflectiveShadowMapNormal, lSampleUV, 0.0); 
      if(lReflectiveShadowMapNormalUsed.w < 0.5){
        continue;
      }

      float lSampleDepth = textureLod(uTexReflectiveShadowMapDepth, lSampleUV, 0.0).x;

      vec4 lReflectiveShadowMapTempPosition = uReflectiveShadowMapToWorldMatrix * vec4(fma(vec3(lSampleUV.xy, lSampleDepth), vec3(2.0), vec3(-1.0)), 1.0); 
      vec3 lReflectiveShadowMapPosition = lReflectiveShadowMapTempPosition.xyz / lReflectiveShadowMapTempPosition.w; 
      vec3 lReflectiveShadowMapColor = textureLod(uTexReflectiveShadowMapColor, lSampleUV, 0.0).xyz;  
      vec3 lReflectiveShadowMapNormal = normalize(lReflectiveShadowMapNormalUsed.xyz - vec3(0.5)); 

      float lDistance = distance(lSamplePosition, lReflectiveShadowMapPosition); 
      if(lDistance < lStratumLength){
        continue;
      }
      
      vec3 lDirection = (lDistance <= 0.007) ? vec3(0.0) : normalize(lSamplePosition - lReflectiveShadowMapPosition);

      float lFactor = max(dot(lDirection, lReflectiveShadowMapNormal), 0.0);
      if(lFactor < 0.07){
        continue;
      }
      lFactor /= (lDistance * lDistance) + 1e-2;

#if OCCLUSION_SAMPLES > 0
      float lCurrentVisibility;
      {
        vec4 lTemp = uModelViewProjectionMatrix * vec4(lSamplePosition, 1.0); 
        lTemp /= lTemp.w;
        lCurrentVisibility = (lTemp.z < (((textureLod(uTexDepthBuffer, vec2((lTemp.xy * 0.5) + vec2(0.5)), 0.0).x * 2.0) - 1.0) * 1.1)) ? 1.0 : -1.0; 
      }
      float lDepthVisibility = 1.0; 
      for(int lOcclusionSampleIndex = 1; lOcclusionSampleIndex < OCCLUSION_SAMPLES; lOcclusionSampleIndex++){ 
        vec4 lTemp = uModelViewProjectionMatrix * vec4(mix(lReflectiveShadowMapPosition, lPosition, float(lOcclusionSampleIndex) / float(OCCLUSION_SAMPLES)), 1.0); 
        lTemp /= lTemp.w;
        lDepthVisibility -= ((lTemp.z * lCurrentVisibility) < (((textureLod(uTexDepthBuffer, vec2((lTemp.xy * 0.5) + vec2(0.5)), 0.0).x * 2.0) - 1.0) * lCurrentVisibility)) ? 0.0 : (1.0 / float(OCCLUSION_SAMPLES)); 
      } 
      lFactor *= clamp(lDepthVisibility, 0.0, 1.0);
#endif
      
      globalIlluminationCompressedSphericalHarmonicsEncodeAndAccumulate(lDirection, globalIlluminationEncodeColor(max(vec3(0.0), lReflectiveShadowMapColor.xyz * lFactor)), lSphericalHarmonics);
      
      lMinimumDistance = min(lMinimumDistance, lDistance); 
      lMaximumDistance = max(lMaximumDistance, lDistance); 
    } 
    
    ivec3 lVolumePosition = lInvocationPosition;

    vec4 lMetaInfo = imageLoad(uImageMetaInfo[lCascadeIndex], lVolumePosition);
    lMetaInfo = vec4(min(lMetaInfo.x, lMinimumDistance), max(lMetaInfo.y, lMaximumDistance), 0.0, 0.0);

    vec2 lTexSize = vec2(textureSize(uTexReflectiveShadowMapColor, 0).xy);

    // The area of the square is given by \(A_{\text{square}} = w \cdot h = w^2\) (since \(w = h\)), and the area of the circle inscribed
    // within the square is given by \(A_{\text{circle}} = \pi \cdot r^2\), where \(r\) is the radius of the circle.
    
    // Since the circle is inscribed within the square, the diameter of the circle is equal to the side length of the square, so
    // \(r = \frac{w}{2}\).
    
    // Substituting this into the formula for the area of the circle gives:
    // \[A_{\text{circle}} = \pi \cdot \left(\frac{w}{2}\right)^2 = \frac{\pi \cdot w^2}{4}\]
    
    // To normalize the sampling area of the circle to match that of the square, you can use the ratio of the areas:
    // \[ \text{Normalization factor} = \frac{A_{\text{circle}}}{A_{\text{square}}} = \frac{\frac{\pi \cdot w^2}{4}}{w^2} = \frac{\pi}{4} \]
    // The area of the square is given by \(A_{\text{square}} = w \cdot h = w^2\) (since \(w = h\)), and the area of the circle is given by \(A_{\text{circle}} = \pi \cdot r^2\), where \(r\) is the radius of the circle.
    const float lCircleAreaToSquareAreaFactor = 0.7853981633974483; // 3.1415926535897932384626433832795 / 4.0; 

    // To normalize the sampling area of the square to match that of the circle, you can use the ratio of the areas:
    // \[ \text{Normalization factor} = \frac{A_{\text{square}}}{A_{\text{circle}}} = \frac{w^2}{\left(\frac{\pi \cdot w^2}{4}\right)} = \frac{4}{\pi} \]
    // The area of the square is given by \(A_{\text{square}} = w \cdot h = w^2\) (since \(w = h\)), and the area of the circle is given by \(A_{\text{circle}} = \pi \cdot r^2\), where \(r\) is the radius of the circle.
    const float lSquareAreaToCircleAreaFactor = 1.2732395447351628; // 4.0 / 3.1415926535897932384626433832795; 

    // PDF = 1 / (A * cos(theta) * solid angle)
  //float lInvPDF = (lTexSize.x * lTexSize.y * uSpread.x * uSpread.y) * (lSquareAreaToCircleAreaFactor * 3.1415926535897932384626433832795); // multiply by PI because we are on a circle
    float lInvPDF = (lTexSize.x * lTexSize.y * uSpread.x * uSpread.y) * 4.0; // because after substiution, we get just 4.0
    float lSHScale = lInvPDF / float(SAMPLES);

    // Integrating over a sphere so each sample has a weight of (4.0 * PI) / samplecount (uniform solid angle, for each sample)
//  float lSHScale = 12.5663706144 / float(SAMPLES);

    lSphericalHarmonics[0] *= lSHScale;
#if GI_COMPRESSION == 0
    lSphericalHarmonics[1] *= lSHScale;
    lSphericalHarmonics[2] *= lSHScale;
    lSphericalHarmonics[3] *= lSHScale;
    lSphericalHarmonics[4] *= lSHScale;
    lSphericalHarmonics[5] *= lSHScale;
    lSphericalHarmonics[6] *= lSHScale;
    lSphericalHarmonics[7] *= lSHScale;
    lSphericalHarmonics[8] *= lSHScale;
#elif GI_COMPRESSION == 1
    lSphericalHarmonics[1] *= lSHScale;
    lSphericalHarmonics[2] *= lSHScale;
    lSphericalHarmonics[3] *= lSHScale;
    lSphericalHarmonics[4].x *= lSHScale;
    lSphericalHarmonics[5].x *= lSHScale;
    lSphericalHarmonics[6].x *= lSHScale;
    lSphericalHarmonics[7].x *= lSHScale;
    lSphericalHarmonics[8].x *= lSHScale;
#elif GI_COMPRESSION == 2
    lSphericalHarmonics[1].x *= lSHScale;
    lSphericalHarmonics[2].x *= lSHScale;
    lSphericalHarmonics[3].x *= lSHScale;
    lSphericalHarmonics[4].x *= lSHScale;
    lSphericalHarmonics[5].x *= lSHScale;
    lSphericalHarmonics[6].x *= lSHScale;
    lSphericalHarmonics[7].x *= lSHScale;
    lSphericalHarmonics[8].x *= lSHScale;
#endif      

    {
#if GI_COMPRESSION == 0
      vec4 lTSH0 = imageLoad(uImageSH[lTexIndexOffset + 0], lVolumePosition);   
      vec4 lTSH1 = imageLoad(uImageSH[lTexIndexOffset + 1], lVolumePosition);   
      vec4 lTSH2 = imageLoad(uImageSH[lTexIndexOffset + 2], lVolumePosition);   
      vec4 lTSH3 = imageLoad(uImageSH[lTexIndexOffset + 3], lVolumePosition);   
      vec4 lTSH4 = imageLoad(uImageSH[lTexIndexOffset + 4], lVolumePosition);   
      vec4 lTSH5 = imageLoad(uImageSH[lTexIndexOffset + 5], lVolumePosition);   
      vec4 lTSH6 = imageLoad(uImageSH[lTexIndexOffset + 6], lVolumePosition);   
      lSphericalHarmonics[0] += vec3(lTSH0.xyz);
      lSphericalHarmonics[1] += vec3(lTSH0.w, lTSH1.xy);
      lSphericalHarmonics[2] += vec3(lTSH1.zw, lTSH2.x);
      lSphericalHarmonics[3] += vec3(lTSH2.yzw);
      lSphericalHarmonics[4] += vec3(lTSH3.xyz);
      lSphericalHarmonics[5] += vec3(lTSH3.w, lTSH4.xy);
      lSphericalHarmonics[6] += vec3(lTSH4.zw, lTSH5.x);
      lSphericalHarmonics[7] += vec3(lTSH5.yzw);
      lSphericalHarmonics[8] += vec3(lTSH6.xyz);
#elif GI_COMPRESSION == 1
      vec4 lTSH0 = imageLoad(uImageSH[lTexIndexOffset + 0], lVolumePosition);   
      vec4 lTSH1 = imageLoad(uImageSH[lTexIndexOffset + 1], lVolumePosition);   
      vec4 lTSH2 = imageLoad(uImageSH[lTexIndexOffset + 2], lVolumePosition);   
      vec4 lTSH3 = imageLoad(uImageSH[lTexIndexOffset + 3], lVolumePosition);   
      vec4 lTSH4 = imageLoad(uImageSH[lTexIndexOffset + 4], lVolumePosition);   
      lSphericalHarmonics[0] += vec3(lTSH0.xyz);
      lSphericalHarmonics[1] += vec3(lTSH0.w, lTSH1.xy);
      lSphericalHarmonics[2] += vec3(lTSH1.zw, lTSH2.x);
      lSphericalHarmonics[3] += vec3(lTSH2.yzw);
      lSphericalHarmonics[4] += vec3(lTSH3.x, vec2(0.0));
      lSphericalHarmonics[5] += vec3(lTSH3.y, vec2(0.0));
      lSphericalHarmonics[6] += vec3(lTSH3.z, vec2(0.0));
      lSphericalHarmonics[7] += vec3(lTSH3.w, vec2(0.0));
      lSphericalHarmonics[8] += vec3(lTSH4.x, vec2(0.0));
#elif GI_COMPRESSION == 2
      vec4 lTSH0 = imageLoad(uImageSH[lTexIndexOffset + 0], lVolumePosition);   
      vec4 lTSH1 = imageLoad(uImageSH[lTexIndexOffset + 1], lVolumePosition);   
      vec4 lTSH2 = imageLoad(uImageSH[lTexIndexOffset + 2], lVolumePosition);   
      lSphericalHarmonics[0] += vec3(lTSH0.xyz);
      lSphericalHarmonics[1] += vec3(lTSH0.w, vec2(0.0));
      lSphericalHarmonics[2] += vec3(lTSH1.x, vec2(0.0));
      lSphericalHarmonics[3] += vec3(lTSH1.y, vec2(0.0));
      lSphericalHarmonics[4] += vec3(lTSH1.z, vec2(0.0));
      lSphericalHarmonics[5] += vec3(lTSH1.w, vec2(0.0));
      lSphericalHarmonics[6] += vec3(lTSH2.x, vec2(0.0));
      lSphericalHarmonics[7] += vec3(lTSH2.y, vec2(0.0));
      lSphericalHarmonics[8] += vec3(lTSH2.z, vec2(0.0));
#endif
    }
    
#if GI_COMPRESSION == 0
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[1].yz, lSphericalHarmonics[2].xy));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[2].z, lSphericalHarmonics[3].xyz));
    imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, vec4(lSphericalHarmonics[4].xyz, lSphericalHarmonics[5].x));
    imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, vec4(lSphericalHarmonics[5].yz, lSphericalHarmonics[6].xy));
    imageStore(uImageSH[lTexIndexOffset + 5], lVolumePosition, vec4(lSphericalHarmonics[6].z, lSphericalHarmonics[7].xyz));
    imageStore(uImageSH[lTexIndexOffset + 6], lVolumePosition, vec4(lSphericalHarmonics[8].xyz, 0.0));
#elif GI_COMPRESSION == 1
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[1].yz, lSphericalHarmonics[2].xy));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[2].z, lSphericalHarmonics[3].xyz));
    imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, vec4(lSphericalHarmonics[4].x, lSphericalHarmonics[5].x, lSphericalHarmonics[6].x, lSphericalHarmonics[7].x));
    imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, vec4(lSphericalHarmonics[8].x, vec3(0.0)));
#elif GI_COMPRESSION == 2
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[2].x, lSphericalHarmonics[3].x, lSphericalHarmonics[4].x, lSphericalHarmonics[5].x));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[6].x, lSphericalHarmonics[7].x, lSphericalHarmonics[8].x, 0.0));
#endif      
    imageStore(uImageMetaInfo[lCascadeIndex], lVolumePosition, lMetaInfo);        

  }

} 