#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

/* clang-format on */

#ifdef USE_RGB9E5
layout(set = 0, binding = 0, r32ui) writeonly uniform uimageCube uDestinationTexture;
#else
layout(set = 0, binding = 0) writeonly uniform imageCube uDestinationTexture;
#endif
layout(set = 0, binding = 1) uniform sampler2D uSourceTexture;

layout(push_constant, std140, row_major) uniform PushConstants {
  vec4 lightDirectionIntensityFactor; // xyz = light direction, w = intensity factor
} pushConstants;

ivec2 destinationTextureSize = imageSize(uDestinationTexture);         

#include "cubemap.glsl"

#ifdef USE_RGB9E5
#include "rgb9e5.glsl"
#endif

#include "textureutils.glsl"

void main() {
  ivec3 uvw = ivec3(gl_GlobalInvocationID.xyz);
  if (all(greaterThanEqual(uvw, ivec3(0))) && all(lessThan(uvw, ivec3(destinationTextureSize, 6)))) {
    vec3 direction = getCubeMapDirection((vec2(uvw.xy) + vec2(0.5)) / vec2(destinationTextureSize), uvw.z);
    vec4 c = textureCatmullRom(
      uSourceTexture, 
      vec2(
        (atan(direction.z, direction.x) / 6.283185307179586476925286766559) + 0.5, 
        acos(direction.y) / 3.1415926535897932384626433832795
      ), 
      0
    ) * vec2(pushConstants.lightDirectionIntensityFactor.w, 1.0).xxxy; 
#ifdef USE_RGB9E5
    imageStore(uDestinationTexture, uvw, uvec4(encodeRGB9E5(c.xyz)));
#else    
    imageStore(uDestinationTexture, uvw, clamp(c, vec4(-65504.0), vec4(65504.0))); // Clamp to the range of 16-bit floating point numbers.
#endif
  }
}