#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

/* clang-format on */

layout(set = 0, binding = 0) writeonly uniform imageCube uDestinationTexture;
layout(set = 0, binding = 1) uniform sampler2D uSourceTexture;

ivec2 destinationTextureSize = imageSize(uDestinationTexture);         

/* clang-format off */
vec3 getCubeMapDirection(in vec2 uv,
                         in int faceIndex){                        
  vec3 zDir = vec3(ivec3((faceIndex <= 1) ? 1 : 0,
                         (faceIndex & 2) >> 1,
                         (faceIndex & 4) >> 2)) *
             (((faceIndex & 1) == 1) ? -1.0 : 1.0),
       yDir = (faceIndex == 2)
                ? vec3(0.0, 0.0, 1.0)
                : ((faceIndex == 3)
                     ? vec3(0.0, 0.0, -1.0)
                     : vec3(0.0, -1.0, 0.0)),
       xDir = cross(zDir, yDir);
  return normalize((mix(-1.0, 1.0, uv.x) * xDir) +
                   (mix(-1.0, 1.0, uv.y) * yDir) +
                   zDir);
}
/* clang-format on */

#include "textureutils.glsl"

void main() {
  ivec3 uvw = ivec3(gl_GlobalInvocationID.xyz);
  if (all(greaterThanEqual(uvw, ivec3(0))) && all(lessThan(uvw, ivec3(destinationTextureSize, 6)))) {
    vec3 direction = getCubeMapDirection((vec2(uvw.xy) + vec2(0.5)) / vec2(destinationTextureSize), uvw.z);
    imageStore(
      uDestinationTexture, 
      uvw, 
      textureCatmullRom(
        uSourceTexture, 
        vec2(
          (atan(direction.z, direction.x) / 6.283185307179586476925286766559) + 0.5, 
          acos(direction.y) / 3.1415926535897932384626433832795
        ), 
        0
      )
    );
  }
}