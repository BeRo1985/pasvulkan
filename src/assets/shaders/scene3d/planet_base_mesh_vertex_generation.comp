#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) buffer FibonacciSpherePoints {
  vec4 vectors[]; // actually vec3, but we need to align to vec4
} fibonacciSpherePoints;

layout(push_constant) uniform PushConstants {
  uint countPoints;
} pushConstants;

/* clang-format on */

void main(){
  uint index = uint(gl_GlobalInvocationID.x);
  if(index < pushConstants.countPoints){
    const float GoldenRatioMinusOne = 0.61803398874989485; // ((1.0 + sqrt(5.0)) / 2.0) - 1.0    
    const float HalfPI = 1.570796326794896619; // PI / 2.0
    const float TwoPI = 6.283185307179586477; // PI * 2.0     
    float phi = fract(index * GoldenRatioMinusOne) * TwoPI;
    float z = 1.0 - (float(uint((index << 1u) | 1u)) / float(pushConstants.countPoints)); // z = 1.0 - (((float(index) + 0.5) * 2.0) / float(pushConstants.countPoints)); 
    float sinTheta = sqrt(1.0 - (z * z)); // where theta = arccos(z), and sinTheta = sin(theta), because (sin(theta))^2 + (cos(theta))^2 = 1.0
    fibonacciSpherePoints.vectors[index] = vec4(normalize(vec3(sin(vec2(vec2(phi) + vec2(HalfPI, 0.0))) * sinTheta, z).xzy), 0.0); 
  }
}
