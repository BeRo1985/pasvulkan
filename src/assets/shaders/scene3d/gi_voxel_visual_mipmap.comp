#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
//#extension GL_EXT_scalar_block_layout : enable

/* clang-format off */

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (set = 0, binding = 0, std140) readonly uniform VoxelGridData {
  vec4 clipMaps[4]; // xyz = center in world-space, w = extent of a voxel 
  uint countClipMaps; // maximum 4 clipmaps
  uint hardwareConservativeRasterization; // 0 = false, 1 = true
} voxelGridData;

layout(set = 0, binding = 1, r32ui) readonly uniform uimage3D uImageSourceVolumeColor[]; // as 32-bit unsigned integer aliased/casted 9.5 bit fixed point (RGB9E5)

layout(set = 0, binding = 2, r8) readonly uniform image3D uImageSourceVolumeAlpha[]; // 0.0 .. 1.0 scaled 8-bit unsigned integer (R8_unorm)

layout(set = 0, binding = 3, r32ui) writeonly uniform uimage3D uImageDestinationVolumeColor[]; // as 32-bit unsigned integer aliased/casted 9.5 bit fixed point (RGB9E5)

layout(set = 0, binding = 4, r8) writeonly uniform image3D uImageDestinationVolumeAlpha[]; // 0.0 .. 1.0 scaled 8-bit unsigned integer (R8_unorm)

layout(push_constant) uniform PushConstants {
  uint mipMapLevel;
} pushConstants;

#include "rgb9e5.glsl"

#define voxelIndex(x, y, z) ((((z << 1) + y) << 1) + x)    

void fetchVoxels(out vec4 voxels[8], const in uint index, const in ivec3 pos){
  voxels = vec4[8](
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(0, 0, 0)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(0, 0, 0)).x), // 0
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(1, 0, 0)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(1, 0, 0)).x), // 1
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(0, 1, 0)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(0, 1, 0)).x), // 2
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(1, 1, 0)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(1, 1, 0)).x), // 3
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(0, 0, 1)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(0, 0, 1)).x), // 4
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(1, 0, 1)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(1, 0, 1)).x), // 5
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(0, 1, 1)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(0, 1, 1)).x), // 6
    vec4(decodeRGB9E5(imageLoad(uImageSourceVolumeColor[index], pos + ivec3(1, 1, 1)).x), imageLoad(uImageSourceVolumeAlpha[index], pos + ivec3(1, 1, 1)).x)  // 7
  );
}                        

void main(){

  uint voxelSourceGridSize = uint(voxelGridData.clipMaps[0].w);

  uint voxelDestinationGridSize = voxelSourceGridSize >> pushConstants.mipMapLevel;

  voxelSourceGridSize >>= (pushConstants.mipMapLevel - 1);

  uvec3 invocation = uvec3(gl_GlobalInvocationID.xyz);

  if(all(greaterThanEqual(invocation, uvec3(0))) && all(lessThan(invocation, uvec3(uvec2(voxelDestinationGridSize), voxelDestinationGridSize * voxelGridData.countClipMaps)))){

    uint clipMapIndex = invocation.z / voxelDestinationGridSize;

    uvec3 volumeDestinationPosition = uvec3(invocation.xy, invocation.z - (clipMapIndex * voxelDestinationGridSize));

    uvec3 volumeSourcePosition = volumeDestinationPosition << 1u;

    uint baseImageIndex = clipMapIndex * 6u;

    vec4 voxels[8];
    {
      // +x
      fetchVoxels(voxels, baseImageIndex + 0, ivec3(volumeSourcePosition));
      vec4 temp = ((voxels[voxelIndex(0, 0, 0)] + (voxels[voxelIndex(1, 0, 0)] * (1.0 - voxels[voxelIndex(0, 0, 0)].w))) +
                   (voxels[voxelIndex(0, 1, 0)] + (voxels[voxelIndex(1, 1, 0)] * (1.0 - voxels[voxelIndex(0, 1, 0)].w))) +
                   (voxels[voxelIndex(0, 0, 1)] + (voxels[voxelIndex(1, 0, 1)] * (1.0 - voxels[voxelIndex(0, 0, 1)].w))) +
                   (voxels[voxelIndex(0, 1, 1)] + (voxels[voxelIndex(1, 1, 1)] * (1.0 - voxels[voxelIndex(0, 1, 1)].w)))) * 0.25;  
      imageStore(uImageDestinationVolumeColor[baseImageIndex + 0], ivec3(volumeDestinationPosition), uvec4(encodeRGB9E5(temp.xyz)));
      imageStore(uImageDestinationVolumeAlpha[baseImageIndex + 0], ivec3(volumeDestinationPosition), vec4(clamp(temp.w, 0.0, 1.0)));
    }
    
    {
      // +y
      fetchVoxels(voxels, baseImageIndex + 1, ivec3(volumeSourcePosition));
      vec4 temp = ((voxels[voxelIndex(0, 0, 0)] + (voxels[voxelIndex(0, 1, 0)] * (1.0 - voxels[voxelIndex(0, 0, 0)].w))) +
                   (voxels[voxelIndex(1, 0, 0)] + (voxels[voxelIndex(1, 1, 0)] * (1.0 - voxels[voxelIndex(1, 0, 0)].w))) +
                   (voxels[voxelIndex(0, 0, 1)] + (voxels[voxelIndex(0, 1, 1)] * (1.0 - voxels[voxelIndex(0, 0, 1)].w))) +
                   (voxels[voxelIndex(1, 0, 1)] + (voxels[voxelIndex(1, 1, 1)] * (1.0 - voxels[voxelIndex(1, 0, 1)].w)))) * 0.25;  
      imageStore(uImageDestinationVolumeColor[baseImageIndex + 1], ivec3(volumeDestinationPosition), uvec4(encodeRGB9E5(temp.xyz)));
      imageStore(uImageDestinationVolumeAlpha[baseImageIndex + 1], ivec3(volumeDestinationPosition), vec4(clamp(temp.w, 0.0, 1.0)));
    }
    
    {
      // +z
      fetchVoxels(voxels, baseImageIndex + 2, ivec3(volumeSourcePosition));
      vec4 temp = ((voxels[voxelIndex(0, 0, 0)] + (voxels[voxelIndex(0, 0, 1)] * (1.0 - voxels[voxelIndex(0, 0, 0)].w))) +
                   (voxels[voxelIndex(1, 0, 0)] + (voxels[voxelIndex(1, 0, 1)] * (1.0 - voxels[voxelIndex(1, 0, 0)].w))) +
                   (voxels[voxelIndex(0, 1, 0)] + (voxels[voxelIndex(0, 1, 1)] * (1.0 - voxels[voxelIndex(0, 1, 0)].w))) +
                   (voxels[voxelIndex(1, 1, 0)] + (voxels[voxelIndex(1, 1, 1)] * (1.0 - voxels[voxelIndex(1, 1, 0)].w)))) * 0.25;  
      imageStore(uImageDestinationVolumeColor[baseImageIndex + 2], ivec3(volumeDestinationPosition), uvec4(encodeRGB9E5(temp.xyz)));
      imageStore(uImageDestinationVolumeAlpha[baseImageIndex + 2], ivec3(volumeDestinationPosition), vec4(clamp(temp.w, 0.0, 1.0)));
    }
    
    {
      // -x
      fetchVoxels(voxels, baseImageIndex + 3, ivec3(volumeSourcePosition));
      vec4 temp = ((voxels[voxelIndex(1, 0, 0)] + (voxels[voxelIndex(0, 0, 0)] * (1.0 - voxels[voxelIndex(1, 0, 0)].w))) +
                   (voxels[voxelIndex(1, 1, 0)] + (voxels[voxelIndex(0, 1, 0)] * (1.0 - voxels[voxelIndex(1, 1, 0)].w))) +
                   (voxels[voxelIndex(1, 0, 1)] + (voxels[voxelIndex(0, 0, 1)] * (1.0 - voxels[voxelIndex(1, 0, 1)].w))) +
                   (voxels[voxelIndex(1, 1, 1)] + (voxels[voxelIndex(0, 1, 1)] * (1.0 - voxels[voxelIndex(1, 1, 1)].w)))) * 0.25;  
      imageStore(uImageDestinationVolumeColor[baseImageIndex + 3], ivec3(volumeDestinationPosition), uvec4(encodeRGB9E5(temp.xyz)));
      imageStore(uImageDestinationVolumeAlpha[baseImageIndex + 3], ivec3(volumeDestinationPosition), vec4(clamp(temp.w, 0.0, 1.0)));
    }
    
    {
      // -y
      fetchVoxels(voxels, baseImageIndex + 4, ivec3(volumeSourcePosition));
      vec4 temp = ((voxels[voxelIndex(0, 1, 0)] + (voxels[voxelIndex(0, 0, 0)] * (1.0 - voxels[voxelIndex(0, 1, 0)].w))) +
                   (voxels[voxelIndex(1, 1, 0)] + (voxels[voxelIndex(1, 0, 0)] * (1.0 - voxels[voxelIndex(1, 1, 0)].w))) +
                   (voxels[voxelIndex(0, 1, 1)] + (voxels[voxelIndex(0, 0, 1)] * (1.0 - voxels[voxelIndex(0, 1, 1)].w))) +
                   (voxels[voxelIndex(1, 0, 1)] + (voxels[voxelIndex(1, 0, 1)] * (1.0 - voxels[voxelIndex(1, 1, 1)].w)))) * 0.25;  
      imageStore(uImageDestinationVolumeColor[baseImageIndex + 4], ivec3(volumeDestinationPosition), uvec4(encodeRGB9E5(temp.xyz)));
      imageStore(uImageDestinationVolumeAlpha[baseImageIndex + 4], ivec3(volumeDestinationPosition), vec4(clamp(temp.w, 0.0, 1.0)));
    }

    {
      // -z
      fetchVoxels(voxels, baseImageIndex + 5, ivec3(volumeSourcePosition));
      vec4 temp = ((voxels[voxelIndex(0, 0, 1)] + (voxels[voxelIndex(0, 0, 0)] * (1.0 - voxels[voxelIndex(0, 0, 1)].w))) +
                   (voxels[voxelIndex(1, 0, 1)] + (voxels[voxelIndex(1, 0, 0)] * (1.0 - voxels[voxelIndex(1, 0, 1)].w))) +
                   (voxels[voxelIndex(0, 1, 1)] + (voxels[voxelIndex(0, 1, 0)] * (1.0 - voxels[voxelIndex(0, 1, 1)].w))) +
                   (voxels[voxelIndex(1, 1, 1)] + (voxels[voxelIndex(1, 1, 0)] * (1.0 - voxels[voxelIndex(1, 1, 1)].w)))) * 0.25;  
      imageStore(uImageDestinationVolumeColor[baseImageIndex + 5], ivec3(volumeDestinationPosition), uvec4(encodeRGB9E5(temp.xyz)));
      imageStore(uImageDestinationVolumeAlpha[baseImageIndex + 5], ivec3(volumeDestinationPosition), vec4(clamp(temp.w, 0.0, 1.0)));
    }             

  }

}