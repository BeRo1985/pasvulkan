
let resolution = 10;

let triangles = new Array((resolution + 1) * (resolution + 1) * 3);

let rowColumns = new Array((resolution + 1) * (resolution + 1));

let k = 0, c = 0;

// loop through rows of vertices on bottom side, only + 1 because we're excluding the single one on the right side
for(let i = 0, icount = resolution + 1; i < icount; i++){

  print(k, ": ");

  // loop through vertices on this row
  for(let j = 0, jcount = (resolution + 1) - i; j < jcount; j++){

    print(j, " ");

    // get index of next vertex on this row 
    let next = c + ((resolution + 2) - i); 

    triangles[k] = c; // current vertex
    triangles[k + 1] = c + 1; // the next vertex on this row
    triangles[k + 2] = next; // the next vertex on the next row
    k += 3;
    
    // add down pointing triangles, when we're not on the last row
    if(j > 0){      
      triangles[k] = c;
      triangles[k + 1] = next;
      triangles[k + 2] = next - 1;
      k += 3;
    }

    c++;
  }

  // increment counter, because we're skipping the top vertex
  c++; 

  print("\n");
}

print("k: ", k, " must be ", ((resolution + 1) * (resolution + 1) * 3), " - c: ", c, " must be ", ((((resolution + 2) * (resolution + 2)) + (resolution + 2)) / 2) - 1, "\n");

