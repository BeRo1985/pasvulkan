#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_samplerless_texture_functions : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform texture2D uImageHeightMap;

layout(set = 0, binding = 1) uniform texture2D uImageWaterMap;

layout(set = 0, binding = 2, std430) coherent buffer WaterVisibilityBuffer {
  uint bitmap[];
} waterVisibilityBuffer;

layout(push_constant) uniform PushConstants {
  uint tileMapResolution;
  uint tileShift;
  float bottomRadius;
  float topRadius; 
  float maxWaterAdditionalWavesHeight;
} pushConstants;

/* clang-format on */

void main(){
  
  uvec2 texel = uvec2(gl_GlobalInvocationID.xy);

  uvec2 texSize = uvec2(textureSize(uImageHeightMap, 0).xy);

  if(all(lessThan(texel, texSize))){

    if((texelFetch(uImageWaterMap, ivec2(texel), 0).x + pushConstants.maxWaterAdditionalWavesHeight) > 0.0){
//  if((texelFetch(uImageWaterMap, ivec2(texel), 0).x + pushConstants.maxWaterAdditionalWavesHeight) >= mix(pushConstants.bottomRadius, pushConstants.topRadius, clamp(texelFetch(uImageHeightMap, ivec2(texel), 0).x, 0.0, 1.0))){
   
      const uvec2 tileMapXY = texel >> uvec2(pushConstants.tileShift);
   
      const uint tileMapIndex = (tileMapXY.y * pushConstants.tileMapResolution) + tileMapXY.x;
   
      atomicOr(waterVisibilityBuffer.bitmap[tileMapIndex >> 5u], 1u << (tileMapIndex & 31u));
   
    }

  }

}