#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#define OCCLUSION_SAMPLES 0
#define SAMPLES 32 
#define USE_3D_ARRAY

#if (SAMPLES != 12) && (SAMPLES != 20) && (SAMPLES != 32)
  #undef USE_3D_ARRAY
#endif

#define INJECT_RSM_COMPUTE_SHADER

layout(set = 0, binding = 0) uniform sampler2D uTexture2DInputs[]; // 0 = RSM depth, 1 = RSM color, 2 = RSM normal, 3 = depth buffer
layout(set = 0, binding = 1, rgba16f) coherent uniform image3D uImageSH[]; // The global illumination volume images
layout(set = 0, binding = 2, rgba32f) coherent uniform image3D uImageMetaInfo; // The global illumination volume meta info image
layout(set = 0, binding = 3) uniform sampler3D uTexLastSH[]; // The previous global illumination volume textures
layout(set = 0, binding = 4) uniform sampler3D uTexLastMetaInfo; // The previous global illumination volume meta info texture
layout(set = 0, binding = 5) uniform sampler3D uTexSH[]; // The current global illumination volume textures
layout(set = 0, binding = 6) uniform sampler3D uTexMetaInfo; // The current global illumination volume meta info texture
layout(set = 0, binding = 7, std140) uniform uMetaData {
  mat4 uWorldToReflectiveShadowMapMatrix;
  mat4 uReflectiveShadowMapToWorldMatrix;
  mat4 uModelViewProjectionMatrix;
  vec4 uLightDirection;
  vec4 uLightPosition;
  vec4 uLightColor;
  float uMaximumSamplingDistance;
  float uSpread;
  int uFirst;  
};

#define uTexReflectiveShadowMapDepth uTexture2DInputs[0]
#define uTexReflectiveShadowMapColor uTexture2DInputs[1]
#define uTexReflectiveShadowMapNormal uTexture2DInputs[2]
#define uTexDepthBuffer uTexture2DInputs[3]

#define GLOBAL_ILLUMINATION_VOLUME_UNIFORM_SET 0
#define GLOBAL_ILLUMINATION_VOLUME_UNIFORM_BINDING 8

#include "global_illumination_cascaded_radiance_hints.glsl"

#if defined(USE_3D_ARRAY)
#if SAMPLES == 12
  const vec2 gGlobalIlluminationTaps2D[12] = vec2[](vec2(0.031084, 0.572114),
                                                    vec2(0.040671, 0.95653),
                                                    vec2(0.160921, 0.367819),
                                                    vec2(0.230518, 0.134321),
                                                    vec2(0.247078, 0.819415),
                                                    vec2(0.428665, 0.440522),
                                                    vec2(0.49846, 0.80717),
                                                    vec2(0.604285, 0.0307766),
                                                    vec2(0.684075, 0.283001),
                                                    vec2(0.688304, 0.624171),
                                                    vec2(0.833995, 0.832414),
                                                    vec2(0.975397, 0.189911));
  const vec3 gGlobalIlluminationTaps3D[12] = vec3[](vec3(0.0565813, 0.61211, 0.763359),
                                                    vec3(0.375225, 0.285592, 0.987915),
                                                    vec3(0.615192, 0.668996, 0.604938),
                                                    vec3(0.963195, 0.355937, 0.175787),
                                                    vec3(0.0295724, 0.484268, 0.265694),
                                                    vec3(0.917783, 0.88702, 0.201972),
                                                    vec3(0.408948, 0.0675985, 0.427564),
                                                    vec3(0.19071, 0.923612, 0.0553606),
                                                    vec3(0.968078, 0.403943, 0.847224),
                                                    vec3(0.384503, 0.922269, 0.990844),
                                                    vec3(0.480605, 0.342418, 0.00195318),
                                                    vec3(0.956664, 0.923643, 0.915799));
#elif SAMPLES == 20
  const vec2 gGlobalIlluminationTaps2D[20] = vec2[](vec2(0.00240055, 0.643992),
                                                    vec2(0.0356464, 0.851616),
                                                    vec2(0.101733, 0.21876),
                                                    vec2(0.166119, 0.0278085),
                                                    vec2(0.166438, 0.474999),
                                                    vec2(0.24991, 0.766405),
                                                    vec2(0.333714, 0.130407),
                                                    vec2(0.400681, 0.374781),
                                                    vec2(0.424067, 0.888211),
                                                    vec2(0.448511, 0.678962),
                                                    vec2(0.529383, 0.213568),
                                                    vec2(0.608569, 0.47715),
                                                    vec2(0.617996, 0.862528),
                                                    vec2(0.631784, 0.0515881),
                                                    vec2(0.740969, 0.20753),
                                                    vec2(0.788203, 0.41923),
                                                    vec2(0.794066, 0.615141),
                                                    vec2(0.834504, 0.836612),
                                                    vec2(0.89446, 0.0677863),
                                                    vec2(0.975609, 0.446056));
  const vec3 gGlobalIlluminationTaps3D[20] = vec3[](vec3(0.0540788, 0.411725, 0.134068),
                                                    vec3(0.0163579, 0.416211, 0.992035),
                                                    vec3(0.692068, 0.549272, 0.886502),
                                                    vec3(0.305795, 0.781854, 0.571337),
                                                    vec3(0.791681, 0.139042, 0.247047),
                                                    vec3(0.83929, 0.973663, 0.460982),
                                                    vec3(0.0336314, 0.0867641, 0.582324),
                                                    vec3(0.148198, 0.961974, 0.0378124),
                                                    vec3(0.948729, 0.0713828, 0.916379),
                                                    vec3(0.586413, 0.591845, 0.031251),
                                                    vec3(0.00189215, 0.973968, 0.932981),
                                                    vec3(0.435865, 0.0853603, 0.995148),
                                                    vec3(0.36848, 0.820612, 0.942717),
                                                    vec3(0.500107, 0.0658284, 0.623005),
                                                    vec3(0.580187, 0.4485, 0.379223),
                                                    vec3(0.258614, 0.0201422, 0.241005),
                                                    vec3(0.987152, 0.441664, 0.43318),
                                                    vec3(0.925108, 0.917203, 0.921506),
                                                    vec3(0.988372, 0.822047, 0.12479),
                                                    vec3(0.330393, 0.43611, 0.762566));
#elif SAMPLES == 32
  const vec2 gGlobalIlluminationTaps2D[32] = vec2[](vec2(0.0262032, 0.215221),
                                                    vec2(0.0359769, 0.0467256),
                                                    vec2(0.0760799, 0.713481),
                                                    vec2(0.115087, 0.461431),
                                                    vec2(0.119488, 0.927444),
                                                    vec2(0.22346, 0.319747),
                                                    vec2(0.225964, 0.679227),
                                                    vec2(0.238626, 0.0618425),
                                                    vec2(0.243326, 0.535066),
                                                    vec2(0.29832, 0.90826),
                                                    vec2(0.335208, 0.212103),
                                                    vec2(0.356438, 0.751969),
                                                    vec2(0.401021, 0.478664),
                                                    vec2(0.412027, 0.0245297),
                                                    vec2(0.48477, 0.320659),
                                                    vec2(0.494311, 0.834621),
                                                    vec2(0.515007, 0.165552),
                                                    vec2(0.534574, 0.675536),
                                                    vec2(0.585357, 0.432483),
                                                    vec2(0.600102, 0.94139),
                                                    vec2(0.650182, 0.563571),
                                                    vec2(0.672336, 0.771816),
                                                    vec2(0.701811, 0.187078),
                                                    vec2(0.734207, 0.359024),
                                                    vec2(0.744775, 0.924466),
                                                    vec2(0.763628, 0.659075),
                                                    vec2(0.80735, 0.521281),
                                                    vec2(0.880585, 0.107684),
                                                    vec2(0.898505, 0.904047),
                                                    vec2(0.902536, 0.718989),
                                                    vec2(0.928022, 0.347802),
                                                    vec2(0.971243, 0.504885));
  const vec3 gGlobalIlluminationTaps3D[32] = vec3[](vec3(0.0553911, 0.675924, 0.22129),
                                                    vec3(0.562975, 0.508286, 0.549883),
                                                    vec3(0.574816, 0.703452, 0.0513016),
                                                    vec3(0.981017, 0.930479, 0.243873),
                                                    vec3(0.889309, 0.133091, 0.319071),
                                                    vec3(0.329112, 0.00759911, 0.472213),
                                                    vec3(0.314463, 0.985839, 0.54442),
                                                    vec3(0.407697, 0.202643, 0.985748),
                                                    vec3(0.998169, 0.760369, 0.792932),
                                                    vec3(0.0917692, 0.0666829, 0.0169683),
                                                    vec3(0.0157781, 0.632954, 0.740806),
                                                    vec3(0.938139, 0.235878, 0.87936),
                                                    vec3(0.442305, 0.184942, 0.0901212),
                                                    vec3(0.578051, 0.863948, 0.799554),
                                                    vec3(0.0698569, 0.259194, 0.667592),
                                                    vec3(0.872494, 0.576312, 0.344157),
                                                    vec3(0.10123, 0.930082, 0.959929),
                                                    vec3(0.178594, 0.991302, 0.046205),
                                                    vec3(0.690176, 0.527543, 0.930509),
                                                    vec3(0.982025, 0.389447, 0.0344554),
                                                    vec3(0.033845, 0.0156865, 0.963866),
                                                    vec3(0.655293, 0.154271, 0.640553),
                                                    vec3(0.317881, 0.598621, 0.97998),
                                                    vec3(0.247261, 0.398206, 0.121586),
                                                    vec3(0.822626, 0.985076, 0.655232),
                                                    vec3(0.00201422, 0.434278, 0.388348),
                                                    vec3(0.511399, 0.977416, 0.278695),
                                                    vec3(0.32371, 0.540147, 0.361187),
                                                    vec3(0.365856, 0.41493, 0.758232),
                                                    vec3(0.792871, 0.979217, 0.0309763),
                                                    vec3(0.0509049, 0.459151, 0.996277),
                                                    vec3(0.0305185, 0.13422, 0.306009));
#endif
#endif

void main(){

  ivec3 lInvocationPosition = (ivec3(gl_WorkGroupID.xyz) * ivec3(gl_WorkGroupSize.xyz)) + ivec3(gl_LocalInvocationID.xyz);
  if(all(greaterThanEqual(lInvocationPosition, ivec3(0))) && all(lessThan(lInvocationPosition, uGlobalIlluminationCascadedVolumeSize))){
    
    int lCascadeIndex = lInvocationPosition.z / GI_MAX_DEPTH;
    lInvocationPosition.z -= (lCascadeIndex * GI_MAX_DEPTH);
    
#if GI_COMPRESSION == 0
    int lTexIndexOffset = lCascadeIndex * 7;
#elif GI_COMPRESSION == 1
    int lTexIndexOffset = lCascadeIndex * 5;
#elif GI_COMPRESSION == 2
    int lTexIndexOffset = lCascadeIndex * 3;
#else
    #error "GI_COMPRESSION must be 0, 1 or 2"
#endif   

    if(globalIlluminationVolumeAABBDeltas[lCascadeIndex].w >= 0){
      ivec3 lVolumePosition = lInvocationPosition + ivec3(0, 0, 1 + ((GI_MAX_DEPTH + 2) * lCascadeIndex));
      ivec3 lCacheVolumePosition = lInvocationPosition + globalIlluminationVolumeAABBDeltas[lCascadeIndex].xyz;
      int lBorderCells = int(ceil(globalIlluminationVolumeAABBScale[lCascadeIndex].w));
      if((all(greaterThanEqual(lVolumePosition, ivec3(lBorderCells))) && all(lessThan(lVolumePosition, uGlobalIlluminationVolumeSize - ivec3(lBorderCells)))) &&
          (all(greaterThanEqual(lCacheVolumePosition, ivec3(lBorderCells))) && all(lessThan(lCacheVolumePosition, uGlobalIlluminationVolumeSize - ivec3(lBorderCells))))){
        vec4 uCachedMetaInfo = texelFetch(uTexLastMetaInfo[lCascadeIndex], lCacheVolumePosition, 0);
        if(uCachedMetaInfo.w < 0.5){ 
#if GI_COMPRESSION == 0
          vec4 uCachedSH0 = texelFetch(uTexLastSH[lTexIndexOffset + 0], lCacheVolumePosition, 0);
          vec4 uCachedSH1 = texelFetch(uTexLastSH[lTexIndexOffset + 1], lCacheVolumePosition, 0);
          vec4 uCachedSH2 = texelFetch(uTexLastSH[lTexIndexOffset + 2], lCacheVolumePosition, 0);
          vec4 uCachedSH3 = texelFetch(uTexLastSH[lTexIndexOffset + 3], lCacheVolumePosition, 0);
          vec4 uCachedSH4 = texelFetch(uTexLastSH[lTexIndexOffset + 4], lCacheVolumePosition, 0);
          vec4 uCachedSH5 = texelFetch(uTexLastSH[lTexIndexOffset + 5], lCacheVolumePosition, 0);
          vec4 uCachedSH6 = texelFetch(uTexLastSH[lTexIndexOffset + 6], lCacheVolumePosition, 0);
#elif GI_COMPRESSION == 1
          vec4 uCachedSH0 = texelFetch(uTexLastSH[lTexIndexOffset + 0], lCacheVolumePosition, 0);
          vec4 uCachedSH1 = texelFetch(uTexLastSH[lTexIndexOffset + 1], lCacheVolumePosition, 0);
          vec4 uCachedSH2 = texelFetch(uTexLastSH[lTexIndexOffset + 2], lCacheVolumePosition, 0);
          vec4 uCachedSH3 = texelFetch(uTexLastSH[lTexIndexOffset + 3], lCacheVolumePosition, 0);
          vec4 uCachedSH4 = texelFetch(uTexLastSH[lTexIndexOffset + 4], lCacheVolumePosition, 0);
#elif GI_COMPRESSION == 2
          vec4 uCachedSH0 = texelFetch(uTexLastSH[lTexIndexOffset + 0], lCacheVolumePosition, 0);
          vec4 uCachedSH1 = texelFetch(uTexLastSH[lTexIndexOffset + 1], lCacheVolumePosition, 0);
          vec4 uCachedSH2 = texelFetch(uTexLastSH[lTexIndexOffset + 2], lCacheVolumePosition, 0);
#endif      
#if GI_COMPRESSION == 0
          imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, uCachedSH0);
          imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, uCachedSH1);
          imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, uCachedSH2);
          imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, uCachedSH3);
          imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, uCachedSH4);
          imageStore(uImageSH[lTexIndexOffset + 5], lVolumePosition, uCachedSH5);
          imageStore(uImageSH[lTexIndexOffset + 6], lVolumePosition, uCachedSH6);
#elif GI_COMPRESSION == 1
          imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, uCachedSH0);
          imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, uCachedSH1);
          imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, uCachedSH2);
          imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, uCachedSH3);
          imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, uCachedSH4);
#elif GI_COMPRESSION == 2
          imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, uCachedSH0);
          imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, uCachedSH1);
          imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, uCachedSH2);
#endif      
          imageStore(uImageMetaInfo[lCascadeIndex], lVolumePosition, uCachedMetaInfo);        
          return;    
        }           
      }
    }
    
    vec3 lGlobalIlluminationVolumeAABBMin = globalIlluminationVolumeAABBMin[lCascadeIndex].xyz;   
    vec3 lGlobalIlluminationVolumeAABBMax = globalIlluminationVolumeAABBMax[lCascadeIndex].xyz;   
      
    vec3 lSphericalHarmonics[9];
    lSphericalHarmonics[0] = vec3(0.0); 
    lSphericalHarmonics[1] = vec3(0.0); 
    lSphericalHarmonics[2] = vec3(0.0); 
    lSphericalHarmonics[3] = vec3(0.0); 
    lSphericalHarmonics[4] = vec3(0.0); 
    lSphericalHarmonics[5] = vec3(0.0); 
    lSphericalHarmonics[6] = vec3(0.0); 
    lSphericalHarmonics[7] = vec3(0.0); 
    lSphericalHarmonics[8] = vec3(0.0); 
    
    vec3 lResolution = vec3(uGlobalIlluminationVolumeSize);
    vec3 lExtents = lGlobalIlluminationVolumeAABBMax - lGlobalIlluminationVolumeAABBMin; 
    vec3 lScale = lExtents / lResolution; 
    vec3 lPosition = lGlobalIlluminationVolumeAABBMin + ((lInvocationPosition + vec3(0.5)) * lScale); 
    vec3 lUVW = (lPosition - lGlobalIlluminationVolumeAABBMin) / lExtents;
    
    float lUVDistance = uMaximumSamplingDistance / length(lExtents);
    float lMeanResolution = length(lResolution);
    float lUVDistanceDivMeanResolution = lUVDistance / lMeanResolution;
    float lHalfDivMeanResolution = 0.5 / lMeanResolution;
    
    float lSumScale = 1.0;
    
#if !defined(USE_3D_ARRAY)
    vec4 lSamplePositionSpiral = vec4(0.0,                                   // phi
                                      1.0 - ((2.0 / float(SAMPLES)) * 0.5),  // z
                                      2.399963229728653,                     // delta phi  PI * (3.0 - sqrt(5.0)) (golden angle)  
                                      -(2.0 / float(SAMPLES)));              // delta z
#endif    
    
    bool lMustReprocessOnMove = false;
    
    for(int lSampleIndex = 0; lSampleIndex < SAMPLES; lSampleIndex++){
    
#if defined(USE_3D_ARRAY)
      vec3 lSampleTap = (gGlobalIlluminationTaps3D[lSampleIndex] - vec3(0.5)) * 2.0;  
#else
      float lSamplePositionTheta = acos(lSamplePositionSpiral.y);
      float lSamplePositionThetaSin = sin(lSamplePositionTheta);
      vec3 lSampleTap = vec3(lSamplePositionThetaSin * cos(lSamplePositionSpiral.x), lSamplePositionThetaSin * sin(lSamplePositionSpiral.x), cos(lSamplePositionTheta));
      lSamplePositionSpiral.xy += lSamplePositionSpiral.zw;       
#endif      
      
      vec3 lDirection = normalize(lSampleTap);
      
      float lDistance = lHalfDivMeanResolution + (lSampleTap.x * lSampleTap.x);
      
      vec3 lSampleUVWC = lUVW + (lResolution * lDirection * lDistance * lUVDistanceDivMeanResolution);

      vec3 lSamplePosition = lGlobalIlluminationVolumeAABBMin + (lSampleUVWC * lExtents);
      
      int lSampleCascadeIndex = 0;//lCascadeIndex;
      while(lSampleCascadeIndex < GI_CASCADES){
        if(all(greaterThanEqual(lSamplePosition, globalIlluminationVolumeAABBMin[lSampleCascadeIndex].xyz)) && all(lessThanEqual(lSamplePosition, globalIlluminationVolumeAABBMax[lSampleCascadeIndex].xyz))){
            break;
        }
        lSampleCascadeIndex++;
      }
      
      if((lSampleCascadeIndex >= 0) && (lSampleCascadeIndex < GI_CASCADES)){
        lMustReprocessOnMove = (lCascadeIndex < lSampleCascadeIndex) ? true : lMustReprocessOnMove;
        vec4 lAABBMin = globalIlluminationVolumeAABBMin[lSampleCascadeIndex];
        vec4 lAABBMax = globalIlluminationVolumeAABBMax[lSampleCascadeIndex];
        vec3 lGlobalIlluminationVolumeGet3DTexturePosition = globalIlluminationVolumeGet3DTexturePosition(vec4(vec3((lSamplePosition - lAABBMin.xyz) * globalIlluminationVolumeAABBScale[lSampleCascadeIndex].xyz), float(lSampleCascadeIndex)));
        vec4 lSampleMetaInfo = textureLod(uTexMetaInfo, lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
        vec4 lTSH0 = textureLod(uTexSH[lTexIndexOffset + 0], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
        vec4 lTSH1 = textureLod(uTexSH[lTexIndexOffset + 1], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
        vec4 lTSH2 = textureLod(uTexSH[lTexIndexOffset + 2], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
    #if GI_COMPRESSION < 2
        vec4 lTSH3 = textureLod(uTexSH[lTexIndexOffset + 3], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
        vec4 lTSH4 = textureLod(uTexSH[lTexIndexOffset + 4], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
    #endif
    #if GI_COMPRESSION < 1
        vec4 lTSH5 = textureLod(uTexSH[lTexIndexOffset + 5], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
        vec4 lTSH6 = textureLod(uTexSH[lTexIndexOffset + 6], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0);
    #endif
        if((lSampleCascadeIndex + 1) < GI_CASCADES){
          vec3 lAABBFadeDistances = smoothstep(globalIlluminationVolumeAABBFadeStart[lSampleCascadeIndex].xyz, globalIlluminationVolumeAABBFadeEnd[lSampleCascadeIndex].xyz, abs(lSamplePosition.xyz - globalIlluminationVolumeAABBSnappedCenter[lSampleCascadeIndex].xyz));
          float lAABBFadeFactor = max(max(lAABBFadeDistances.x, lAABBFadeDistances.y), lAABBFadeDistances.z);
          if(lAABBFadeFactor > 1e-4){
            lGlobalIlluminationVolumeGet3DTexturePosition = globalIlluminationVolumeGet3DTexturePosition(vec4(vec3((lSamplePosition - globalIlluminationVolumeAABBMin[lSampleCascadeIndex + 1].xyz) * globalIlluminationVolumeAABBScale[lSampleCascadeIndex + 1].xyz), float(lSampleCascadeIndex + 1)));
            lSampleMetaInfo = mix(lSampleMetaInfo, textureLod(uTexMetaInfo, lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);
            lTSH0 = mix(lTSH0, textureLod(uTexSH[lTexIndexOffset + 0], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);
            lTSH1 = mix(lTSH1, textureLod(uTexSH[lTexIndexOffset + 1], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);
            lTSH2 = mix(lTSH2, textureLod(uTexSH[lTexIndexOffset + 2], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);
    #if GI_COMPRESSION < 2
            lTSH3 = mix(lTSH3, textureLod(uTexSH[lTexIndexOffset + 3], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);
            lTSH4 = mix(lTSH4, textureLod(uTexSH[lTexIndexOffset + 4], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);
    #endif
    #if GI_COMPRESSION < 1
            lTSH5 = mix(lTSH5, textureLod(uTexSH[lTexIndexOffset + 5], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);
            lTSH6 = mix(lTSH6, textureLod(uTexSH[lTexIndexOffset + 6], lGlobalIlluminationVolumeGet3DTexturePosition, 0.0), lAABBFadeFactor);        
    #endif
          }   
        }
        vec3 lSampleSphericalHarmonics[9];
#if GI_COMPRESSION == 0
        lSampleSphericalHarmonics[0] = vec3(lTSH0.xyz);
        lSampleSphericalHarmonics[1] = vec3(lTSH0.w, lTSH1.xy);
        lSampleSphericalHarmonics[2] = vec3(lTSH1.zw, lTSH2.x);
        lSampleSphericalHarmonics[3] = vec3(lTSH2.yzw);
        lSampleSphericalHarmonics[4] = vec3(lTSH3.xyz);
        lSampleSphericalHarmonics[5] = vec3(lTSH3.w, lTSH4.xy);
        lSampleSphericalHarmonics[6] = vec3(lTSH4.zw, lTSH5.x);
        lSampleSphericalHarmonics[7] = vec3(lTSH5.yzw);
        lSampleSphericalHarmonics[8] = vec3(lTSH6.xyz);
#elif GI_COMPRESSION == 1
        lSampleSphericalHarmonics[0] = vec3(lTSH0.xyz);
        lSampleSphericalHarmonics[1] = vec3(lTSH0.w, lTSH1.xy);
        lSampleSphericalHarmonics[2] = vec3(lTSH1.zw, lTSH2.x);
        lSampleSphericalHarmonics[3] = vec3(lTSH2.yzw);
        lSampleSphericalHarmonics[4] = vec3(lTSH3.x, vec2(0.0));
        lSampleSphericalHarmonics[5] = vec3(lTSH3.y, vec2(0.0));
        lSampleSphericalHarmonics[6] = vec3(lTSH3.z, vec2(0.0));
        lSampleSphericalHarmonics[7] = vec3(lTSH3.w, vec2(0.0));
        lSampleSphericalHarmonics[8] = vec3(lTSH4.x, vec2(0.0));
#elif GI_COMPRESSION == 2
        lSampleSphericalHarmonics[0] = vec3(lTSH0.xyz);
        lSampleSphericalHarmonics[1] = vec3(lTSH0.w, vec2(0.0));
        lSampleSphericalHarmonics[2] = vec3(lTSH1.x, vec2(0.0));
        lSampleSphericalHarmonics[3] = vec3(lTSH1.y, vec2(0.0));
        lSampleSphericalHarmonics[4] = vec3(lTSH1.z, vec2(0.0));
        lSampleSphericalHarmonics[5] = vec3(lTSH1.w, vec2(0.0));
        lSampleSphericalHarmonics[6] = vec3(lTSH2.x, vec2(0.0));
        lSampleSphericalHarmonics[7] = vec3(lTSH2.y, vec2(0.0));
        lSampleSphericalHarmonics[8] = vec3(lTSH2.z, vec2(0.0));
#endif

        float lSampleFactor = 1.0 - clamp((lDistance - lSampleMetaInfo.x) / (lSampleMetaInfo.y - lSampleMetaInfo.x), 0.0, 1.0);
        float lSampleWeight = clamp(1.0 - lSampleMetaInfo.x, 0.0, 1.0); 
        
        globalIlluminationCompressedSphericalHarmonicsEncodeAndAccumulate(lDirection, globalIlluminationEncodeColor(max(vec3(0.0), globalIlluminationDecodeColor(globalIlluminationCompressedSphericalHarmonicsDecodeWithCosineLobe(-lDirection, lSampleSphericalHarmonics) * (lSampleFactor * lSampleWeight)))), lSphericalHarmonics);

        lSumScale += lSampleFactor * lSampleWeight;        

      }
      
    }

    ivec3 lVolumePosition = lInvocationPosition + ivec3(0, 0, 1 + ((GI_MAX_DEPTH + 2) * lCascadeIndex));
                        
    float lSHScale = 12.56637062 / lSumScale;
    
    lSphericalHarmonics[0] *= lSHScale;
#if GI_COMPRESSION == 0
    lSphericalHarmonics[1] *= lSHScale;
    lSphericalHarmonics[2] *= lSHScale;
    lSphericalHarmonics[3] *= lSHScale;
    lSphericalHarmonics[4] *= lSHScale;
    lSphericalHarmonics[5] *= lSHScale;
    lSphericalHarmonics[6] *= lSHScale;
    lSphericalHarmonics[7] *= lSHScale;
    lSphericalHarmonics[8] *= lSHScale;
#elif GI_COMPRESSION == 1
    lSphericalHarmonics[1] *= lSHScale;
    lSphericalHarmonics[2] *= lSHScale;
    lSphericalHarmonics[3] *= lSHScale;
    lSphericalHarmonics[4].x *= lSHScale;
    lSphericalHarmonics[5].x *= lSHScale;
    lSphericalHarmonics[6].x *= lSHScale;
    lSphericalHarmonics[7].x *= lSHScale;
    lSphericalHarmonics[8].x *= lSHScale;
#elif GI_COMPRESSION == 2
    lSphericalHarmonics[1].x *= lSHScale;
    lSphericalHarmonics[2].x *= lSHScale;
    lSphericalHarmonics[3].x *= lSHScale;
    lSphericalHarmonics[4].x *= lSHScale;
    lSphericalHarmonics[5].x *= lSHScale;
    lSphericalHarmonics[6].x *= lSHScale;
    lSphericalHarmonics[7].x *= lSHScale;
    lSphericalHarmonics[8].x *= lSHScale;
#endif      

#if GI_COMPRESSION == 0
    vec4 lTSH0 = texelFetch(uTexSH[lTexIndexOffset + 0], lVolumePosition, 0);   
    vec4 lTSH1 = texelFetch(uTexSH[lTexIndexOffset + 1], lVolumePosition, 0);   
    vec4 lTSH2 = texelFetch(uTexSH[lTexIndexOffset + 2], lVolumePosition, 0);   
    vec4 lTSH3 = texelFetch(uTexSH[lTexIndexOffset + 3], lVolumePosition, 0);   
    vec4 lTSH4 = texelFetch(uTexSH[lTexIndexOffset + 4], lVolumePosition, 0);   
    vec4 lTSH5 = texelFetch(uTexSH[lTexIndexOffset + 5], lVolumePosition, 0);   
    vec4 lTSH6 = texelFetch(uTexSH[lTexIndexOffset + 6], lVolumePosition, 0);   
    lSphericalHarmonics[0] += vec3(lTSH0.xyz);
    lSphericalHarmonics[1] += vec3(lTSH0.w, lTSH1.xy);
    lSphericalHarmonics[2] += vec3(lTSH1.zw, lTSH2.x);
    lSphericalHarmonics[3] += vec3(lTSH2.yzw);
    lSphericalHarmonics[4] += vec3(lTSH3.xyz);
    lSphericalHarmonics[5] += vec3(lTSH3.w, lTSH4.xy);
    lSphericalHarmonics[6] += vec3(lTSH4.zw, lTSH5.x);
    lSphericalHarmonics[7] += vec3(lTSH5.yzw);
    lSphericalHarmonics[8] += vec3(lTSH6.xyz);
#elif GI_COMPRESSION == 1
    vec4 lTSH0 = texelFetch(uTexSH[lTexIndexOffset + 0], lVolumePosition, 0);   
    vec4 lTSH1 = texelFetch(uTexSH[lTexIndexOffset + 1], lVolumePosition, 0);   
    vec4 lTSH2 = texelFetch(uTexSH[lTexIndexOffset + 2], lVolumePosition, 0);   
    vec4 lTSH3 = texelFetch(uTexSH[lTexIndexOffset + 3], lVolumePosition, 0);   
    vec4 lTSH4 = texelFetch(uTexSH[lTexIndexOffset + 4], lVolumePosition, 0);   
    lSphericalHarmonics[0] += vec3(lTSH0.xyz);
    lSphericalHarmonics[1] += vec3(lTSH0.w, lTSH1.xy);
    lSphericalHarmonics[2] += vec3(lTSH1.zw, lTSH2.x);
    lSphericalHarmonics[3] += vec3(lTSH2.yzw);
    lSphericalHarmonics[4] += vec3(lTSH3.x, vec2(0.0));
    lSphericalHarmonics[5] += vec3(lTSH3.y, vec2(0.0));
    lSphericalHarmonics[6] += vec3(lTSH3.z, vec2(0.0));
    lSphericalHarmonics[7] += vec3(lTSH3.w, vec2(0.0));
    lSphericalHarmonics[8] += vec3(lTSH4.x, vec2(0.0));
#elif GI_COMPRESSION == 2
    vec4 lTSH0 = texelFetch(uTexSH[lTexIndexOffset + 0], lVolumePosition, 0);   
    vec4 lTSH1 = texelFetch(uTexSH[lTexIndexOffset + 1], lVolumePosition, 0);   
    vec4 lTSH2 = texelFetch(uTexSH[lTexIndexOffset + 2], lVolumePosition, 0);   
    lSphericalHarmonics[0] += vec3(lTSH0.xyz);
    lSphericalHarmonics[1] += vec3(lTSH0.w, vec2(0.0));
    lSphericalHarmonics[2] += vec3(lTSH1.x, vec2(0.0));
    lSphericalHarmonics[3] += vec3(lTSH1.y, vec2(0.0));
    lSphericalHarmonics[4] += vec3(lTSH1.z, vec2(0.0));
    lSphericalHarmonics[5] += vec3(lTSH1.w, vec2(0.0));
    lSphericalHarmonics[6] += vec3(lTSH2.x, vec2(0.0));
    lSphericalHarmonics[7] += vec3(lTSH2.y, vec2(0.0));
    lSphericalHarmonics[8] += vec3(lTSH2.z, vec2(0.0));
#endif

    vec4 lMetaInfo = vec4(texelFetch(uTexMetaInfo[lCascadeIndex], lVolumePosition, 0).xyz, lMustReprocessOnMove ? 1.0 : 0.0);   
    
#if GI_COMPRESSION == 0
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[1].yz, lSphericalHarmonics[2].xy));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[2].z, lSphericalHarmonics[3].xyz));
    imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, vec4(lSphericalHarmonics[4].xyz, lSphericalHarmonics[5].x));
    imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, vec4(lSphericalHarmonics[5].yz, lSphericalHarmonics[6].xy));
    imageStore(uImageSH[lTexIndexOffset + 5], lVolumePosition, vec4(lSphericalHarmonics[6].z, lSphericalHarmonics[7].xyz));
    imageStore(uImageSH[lTexIndexOffset + 6], lVolumePosition, vec4(lSphericalHarmonics[8].xyz, 0.0));
#elif GI_COMPRESSION == 1
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[1].yz, lSphericalHarmonics[2].xy));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[2].z, lSphericalHarmonics[3].xyz));
    imageStore(uImageSH[lTexIndexOffset + 3], lVolumePosition, vec4(lSphericalHarmonics[4].x, lSphericalHarmonics[5].x, lSphericalHarmonics[6].x, lSphericalHarmonics[7].x));
    imageStore(uImageSH[lTexIndexOffset + 4], lVolumePosition, vec4(lSphericalHarmonics[8].x, vec3(0.0)));
#elif GI_COMPRESSION == 2
    imageStore(uImageSH[lTexIndexOffset + 0], lVolumePosition, vec4(lSphericalHarmonics[0].xyz, lSphericalHarmonics[1].x));
    imageStore(uImageSH[lTexIndexOffset + 1], lVolumePosition, vec4(lSphericalHarmonics[2].x, lSphericalHarmonics[3].x, lSphericalHarmonics[4].x, lSphericalHarmonics[5].x));
    imageStore(uImageSH[lTexIndexOffset + 2], lVolumePosition, vec4(lSphericalHarmonics[6].x, lSphericalHarmonics[7].x, lSphericalHarmonics[8].x, 0.0));
#endif      
    imageStore(uImageMetaInfo[lCascadeIndex], lVolumePosition, lMetaInfo);        
    
  }
  
} 