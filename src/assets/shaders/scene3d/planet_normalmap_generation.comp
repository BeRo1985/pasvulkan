#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, r32f) readonly uniform image2D uImageHeightMap;
layout(set = 0, binding = 1, rgba16_snorm) writeonly uniform image2D uImageNormalMap;

/* clang-format on */

layout(push_constant) uniform PushConstants {
  float planetGroundRadius; // planet ground radius
  float heightMapScale; // scale of height map
} pushConstants;

#include "octahedralmap.glsl"
#include "octahedral.glsl"

void main(){
  
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

  ivec2 texSize = imageSize(uImageHeightMap);

  if(all(greaterThanEqual(texel, ivec2(0))) && all(lessThan(texel, texSize))){

    vec2 invTexSize = vec2(1.0) / vec2(texSize);  

    vec2 center = vec2(texel) * invTexSize;

    vec3 sphereNormal = octPlanetSignedDecode(fma(center, vec2(2.0), vec2(-1.0)));
    vec3 sphereTangent = normalize(cross((abs(sphereNormal.y) < 0.999999) ? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, 1.0), sphereNormal));
    vec3 sphereBitangent = normalize(cross(sphereNormal, sphereTangent));

    ivec2 xy = wrapOctahedralTexelCoordinates(texel, texSize);
    ivec2 xy00 = wrapOctahedralTexelCoordinates(texel + ivec2(-1, 0), texSize);
    ivec2 xy01 = wrapOctahedralTexelCoordinates(texel + ivec2(1, 0), texSize);
    ivec2 xy10 = wrapOctahedralTexelCoordinates(texel + ivec2(0, -1), texSize);
    ivec2 xy11 = wrapOctahedralTexelCoordinates(texel + ivec2(0, 1), texSize);

    float scaleFactor = pushConstants.heightMapScale / pushConstants.planetGroundRadius;

    vec3 p = octPlanetUnsignedDecode(vec2(xy00) * invTexSize) * fma(imageLoad(uImageHeightMap, xy).x, scaleFactor, 1.0);
    vec3 p00 = octPlanetUnsignedDecode(vec2(xy00) * invTexSize) * fma(imageLoad(uImageHeightMap, xy00).x, scaleFactor, 1.0);
    vec3 p01 = octPlanetUnsignedDecode(vec2(xy01) * invTexSize) * fma(imageLoad(uImageHeightMap, xy01).x, scaleFactor, 1.0);
    vec3 p10 = octPlanetUnsignedDecode(vec2(xy10) * invTexSize) * fma(imageLoad(uImageHeightMap, xy10).x, scaleFactor, 1.0);
    vec3 p11 = octPlanetUnsignedDecode(vec2(xy11) * invTexSize) * fma(imageLoad(uImageHeightMap, xy11).x, scaleFactor, 1.0);

    vec3 tangent = (distance(p00, p01) > 0.0)
                     ? normalize(p01 - p00) 
                     : ((distance(p10, p11) > 0.0) 
                         ? normalize(cross(normalize(p11 - p10), sphereNormal)) 
                         : normalize(p - p00));

    vec3 bitangent = (distance(p10, p11) > 0.0) 
                       ? normalize(p11 - p10) 
                       : ((distance(p01, p00) > 0.0)
                           ? normalize(cross(normalize(p01 - p00), sphereNormal)) 
                           : normalize(p - p10));

    vec3 normal = normalize(cross(tangent, bitangent));

    imageStore(uImageNormalMap, texel, normal.xyzz);

  }

}