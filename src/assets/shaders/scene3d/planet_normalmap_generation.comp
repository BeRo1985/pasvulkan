#version 450 core

#pragma shader_stage(compute)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

/* clang-format off */

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, r32f) readonly uniform image2D uImageHeightMap;
layout(set = 0, binding = 1, rgba16_snorm) writeonly uniform image2D uImageNormalMap;

/* clang-format on */

layout(push_constant) uniform PushConstants {
  float planetGroundRadius; // planet ground radius
  float heightMapScale; // scale of height map
} pushConstants;

#include "octahedralmap.glsl"
#include "octahedral.glsl"

ivec2 texSize;

float getBilinearHeight(vec2 v){
  v = fma(v, vec2(texSize), vec2(-0.5));
  ivec2 i = ivec2(floor(v));
  vec2 f = v - vec2(i);
  return mix(mix(imageLoad(uImageHeightMap, wrapOctahedralTexelCoordinates(i + ivec2(0, 0), texSize)).x, 
                 imageLoad(uImageHeightMap, wrapOctahedralTexelCoordinates(i + ivec2(1, 0), texSize)).x, f.x), 
             mix(imageLoad(uImageHeightMap, wrapOctahedralTexelCoordinates(i + ivec2(0, 1), texSize)).x,
                 imageLoad(uImageHeightMap, wrapOctahedralTexelCoordinates(i + ivec2(1, 1), texSize)).x, f.x), f.y);
}

void main(){
  
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

  texSize = imageSize(uImageHeightMap);

  if(all(greaterThanEqual(texel, ivec2(0))) && all(lessThan(texel, texSize))){

    vec2 invTexSize = vec2(1.0) / vec2(texSize);  

    vec2 center = vec2(texel) * invTexSize;

    vec3 sphereNormal = octDecode(fma(center, vec2(2.0), vec2(-1.0)));
    vec3 sphereTangent = normalize(cross((abs(sphereNormal.y) < 0.999999) ? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, 1.0), sphereNormal));
    vec3 sphereBitangent = normalize(cross(sphereNormal, sphereTangent));

#if 0

    ivec2 xy00 = wrapOctahedralTexelCoordinates(texel + ivec2(-1, 0), texSize);
    ivec2 xy01 = wrapOctahedralTexelCoordinates(texel + ivec2(1, 0), texSize);
    ivec2 xy10 = wrapOctahedralTexelCoordinates(texel + ivec2(0, -1), texSize);
    ivec2 xy11 = wrapOctahedralTexelCoordinates(texel + ivec2(0, 1), texSize);

    float scaleFactor = pushConstants.heightMapScale / pushConstants.planetGroundRadius;

    vec3 p00 = vec3(fma((vec2(ivec2(texel + ivec2(-1, 0))) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0)), fma(imageLoad(uImageHeightMap, xy00).x, scaleFactor, 1.0));
    vec3 p01 = vec3(fma((vec2(ivec2(texel + ivec2(1, 0))) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0)), fma(imageLoad(uImageHeightMap, xy01).x, scaleFactor, 1.0));
    vec3 p10 = vec3(fma((vec2(ivec2(texel + ivec2(0, -1))) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0)), fma(imageLoad(uImageHeightMap, xy10).x, scaleFactor, 1.0));
    vec3 p11 = vec3(fma((vec2(ivec2(texel + ivec2(0, 1))) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0)), fma(imageLoad(uImageHeightMap, xy11).x, scaleFactor, 1.0));

    vec3 tangent = normalize(p01 - p00);
    vec3 bitangent = normalize(p11 - p10);
    vec3 normal = normalize(cross(tangent, bitangent));

    mat3 tbn = mat3(sphereTangent, sphereBitangent, sphereNormal);

    tangent = normalize(tbn * tangent);
    bitangent = normalize(tbn * bitangent);
    normal = normalize(tbn * normal);    

#else
#if 0

#if 0
    float stepSize = distance(octDecode(fma(vec2(wrapOctahedralTexelCoordinates(texel + ivec2(-1, -1), texSize)) * invTexSize, vec2(2.0), vec2(-1.0))),
                              octDecode(fma(vec2(wrapOctahedralTexelCoordinates(texel + ivec2(1, 1), texSize)) * invTexSize, vec2(2.0), vec2(-1.0)))) * 0.25;
#else
    float stepSize = max(invTexSize.x, invTexSize.y);
#endif

    vec2 t = fma(octEncode(normalize(sphereNormal)), vec2(0.5), vec2(0.5));
    vec2 t00 = fma(octEncode(normalize(sphereNormal + (sphereTangent * (-stepSize)))), vec2(0.5), vec2(0.5));
    vec2 t01 = fma(octEncode(normalize(sphereNormal + (sphereTangent * stepSize))), vec2(0.5), vec2(0.5));
    vec2 t10 = fma(octEncode(normalize(sphereNormal + (sphereBitangent * (-stepSize)))), vec2(0.5), vec2(0.5));
    vec2 t11 = fma(octEncode(normalize(sphereNormal + (sphereBitangent * stepSize))), vec2(0.5), vec2(0.5));

    vec3 p = octDecode(fma(t, vec2(2.0), vec2(-1.0))) * fma(getBilinearHeight(t), pushConstants.heightMapScale / pushConstants.planetGroundRadius, 1.0);
    vec3 p00 = octDecode(fma(t00, vec2(2.0), vec2(-1.0))) * fma(getBilinearHeight(t00), pushConstants.heightMapScale / pushConstants.planetGroundRadius, 1.0);
    vec3 p01 = octDecode(fma(t01, vec2(2.0), vec2(-1.0))) * fma(getBilinearHeight(t01), pushConstants.heightMapScale / pushConstants.planetGroundRadius, 1.0);
    vec3 p10 = octDecode(fma(t10, vec2(2.0), vec2(-1.0))) * fma(getBilinearHeight(t10), pushConstants.heightMapScale / pushConstants.planetGroundRadius, 1.0);
    vec3 p11 = octDecode(fma(t11, vec2(2.0), vec2(-1.0))) * fma(getBilinearHeight(t11), pushConstants.heightMapScale / pushConstants.planetGroundRadius, 1.0);
    
#else

    ivec2 xy = wrapOctahedralTexelCoordinates(texel, texSize);
    ivec2 xy00 = wrapOctahedralTexelCoordinates(texel + ivec2(-1, 0), texSize);
    ivec2 xy01 = wrapOctahedralTexelCoordinates(texel + ivec2(1, 0), texSize);
    ivec2 xy10 = wrapOctahedralTexelCoordinates(texel + ivec2(0, -1), texSize);
    ivec2 xy11 = wrapOctahedralTexelCoordinates(texel + ivec2(0, 1), texSize);

    float scaleFactor = pushConstants.heightMapScale / pushConstants.planetGroundRadius;

    vec3 p = octDecode(fma((vec2(xy00) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0))) * fma(imageLoad(uImageHeightMap, xy).x, scaleFactor, 1.0);
    vec3 p00 = octDecode(fma((vec2(xy00) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0))) * fma(imageLoad(uImageHeightMap, xy00).x, scaleFactor, 1.0);
    vec3 p01 = octDecode(fma((vec2(xy01) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0))) * fma(imageLoad(uImageHeightMap, xy01).x, scaleFactor, 1.0);
    vec3 p10 = octDecode(fma((vec2(xy10) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0))) * fma(imageLoad(uImageHeightMap, xy10).x, scaleFactor, 1.0);
    vec3 p11 = octDecode(fma((vec2(xy11) + vec2(0.5)) * invTexSize, vec2(2.0), vec2(-1.0))) * fma(imageLoad(uImageHeightMap, xy11).x, scaleFactor, 1.0);
#endif

    vec3 tangent = (distance(p00, p01) > 0.0) ? normalize(p01 - p00) : ((distance(p10, p11) > 0.0) ? normalize(cross(normalize(p11 - p10), sphereNormal)) : normalize(p - p00));
    vec3 bitangent = (distance(p10, p11) > 0.0) ? normalize(p11 - p10) : ((distance(p01, p00) > 0.0) ? normalize(cross(normalize(p01 - p00), sphereNormal)) : normalize(p - p10));
    vec3 normal = normalize(cross(tangent, bitangent));
#endif

    imageStore(uImageNormalMap, texel, normal.xyzz);

  }

}